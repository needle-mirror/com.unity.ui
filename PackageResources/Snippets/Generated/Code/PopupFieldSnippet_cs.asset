%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 13807, guid: 0000000000000000e000000000000000, type: 0}
  m_Name: PopupFieldSnippet_cs
  m_EditorClassIdentifier: 
  m_Text: "using System.Collections.Generic;\nusing UnityEditor.UIElements;\nusing
    UnityEngine;\nusing UnityEngine.UIElements;\n\nnamespace UnityEditor.UIElements.Samples\n{\n   
    internal class PopupFieldSnippet : ElementSnippet<PopupFieldSnippet>\n    {\n       
    internal override void Apply(VisualElement container)\n        {\n           
    /// <sample>\n            // Note: PopupField has no UXML support because it
    is a generic type. See DropdownField instead.\n\n            var choices = new
    List<string> { \"First\", \"Second\", \"Third\" };\n\n            // Create a
    new field and assign it its value.\n            var normalField = new PopupField<string>(\"Normal
    Field\", choices, 0);\n            normalField.value = \"Second\";\n           
    container.Add(normalField);\n\n            // Create a new field, disable it,
    and give it a style class.\n            var styledField = new PopupField<string>(\"Styled
    Field\", choices, 0);\n            styledField.SetEnabled(false);\n           
    styledField.AddToClassList(\"some-styled-field\");\n            styledField.value
    = normalField.value;\n            container.Add(styledField);\n\n           
    // Mirror value of uxml field into the C# field.\n            normalField.RegisterCallback<ChangeEvent<string>>((evt)
    =>\n            {\n                styledField.value = evt.newValue;\n           
    });\n            /// </sample>\n        }\n    }\n}\n"
