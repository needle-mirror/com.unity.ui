/******************************************************************************/
//
//                             DO NOT MODIFY
//          This file has been generated by the UIElementsGenerator tool
//              See ComputedStyleCsGenerator class for details
//
/******************************************************************************/
using UnityEngine.UIElements.StyleSheets;

namespace UnityEngine.UIElements
{
    internal partial class ComputedStyle
    {
        public InheritedData inheritedData = new InheritedData();
        public NonInheritedData nonInheritedData = new NonInheritedData();

        public Align alignContent => nonInheritedData.alignContent;
        public Align alignItems => nonInheritedData.alignItems;
        public Align alignSelf => nonInheritedData.alignSelf;
        public Color backgroundColor => nonInheritedData.backgroundColor;
        public Background backgroundImage => nonInheritedData.backgroundImage;
        public Color borderBottomColor => nonInheritedData.borderBottomColor;
        public Length borderBottomLeftRadius => nonInheritedData.borderBottomLeftRadius;
        public Length borderBottomRightRadius => nonInheritedData.borderBottomRightRadius;
        public float borderBottomWidth => nonInheritedData.borderBottomWidth;
        public Color borderLeftColor => nonInheritedData.borderLeftColor;
        public float borderLeftWidth => nonInheritedData.borderLeftWidth;
        public Color borderRightColor => nonInheritedData.borderRightColor;
        public float borderRightWidth => nonInheritedData.borderRightWidth;
        public Color borderTopColor => nonInheritedData.borderTopColor;
        public Length borderTopLeftRadius => nonInheritedData.borderTopLeftRadius;
        public Length borderTopRightRadius => nonInheritedData.borderTopRightRadius;
        public float borderTopWidth => nonInheritedData.borderTopWidth;
        public Length bottom => nonInheritedData.bottom;
        public Color color => inheritedData.color;
        public Cursor cursor => nonInheritedData.cursor;
        public DisplayStyle display => nonInheritedData.display;
        public Length flexBasis => nonInheritedData.flexBasis;
        public FlexDirection flexDirection => nonInheritedData.flexDirection;
        public float flexGrow => nonInheritedData.flexGrow;
        public float flexShrink => nonInheritedData.flexShrink;
        public Wrap flexWrap => nonInheritedData.flexWrap;
        public Length fontSize => inheritedData.fontSize;
        public Length height => nonInheritedData.height;
        public Justify justifyContent => nonInheritedData.justifyContent;
        public Length left => nonInheritedData.left;
        public Length letterSpacing => inheritedData.letterSpacing;
        public Length marginBottom => nonInheritedData.marginBottom;
        public Length marginLeft => nonInheritedData.marginLeft;
        public Length marginRight => nonInheritedData.marginRight;
        public Length marginTop => nonInheritedData.marginTop;
        public Length maxHeight => nonInheritedData.maxHeight;
        public Length maxWidth => nonInheritedData.maxWidth;
        public Length minHeight => nonInheritedData.minHeight;
        public Length minWidth => nonInheritedData.minWidth;
        public float opacity => nonInheritedData.opacity;
        public OverflowInternal overflow => nonInheritedData.overflow;
        public Length paddingBottom => nonInheritedData.paddingBottom;
        public Length paddingLeft => nonInheritedData.paddingLeft;
        public Length paddingRight => nonInheritedData.paddingRight;
        public Length paddingTop => nonInheritedData.paddingTop;
        public Position position => nonInheritedData.position;
        public Length right => nonInheritedData.right;
        public TextOverflow textOverflow => nonInheritedData.textOverflow;
        public TextShadow textShadow => inheritedData.textShadow;
        public Length top => nonInheritedData.top;
        public Color unityBackgroundImageTintColor => nonInheritedData.unityBackgroundImageTintColor;
        public ScaleMode unityBackgroundScaleMode => nonInheritedData.unityBackgroundScaleMode;
        public Font unityFont => inheritedData.unityFont;
        public FontDefinition unityFontDefinition => inheritedData.unityFontDefinition;
        public FontStyle unityFontStyleAndWeight => inheritedData.unityFontStyleAndWeight;
        public OverflowClipBox unityOverflowClipBox => nonInheritedData.unityOverflowClipBox;
        public Length unityParagraphSpacing => inheritedData.unityParagraphSpacing;
        public int unitySliceBottom => nonInheritedData.unitySliceBottom;
        public int unitySliceLeft => nonInheritedData.unitySliceLeft;
        public int unitySliceRight => nonInheritedData.unitySliceRight;
        public int unitySliceTop => nonInheritedData.unitySliceTop;
        public TextAnchor unityTextAlign => inheritedData.unityTextAlign;
        public Color unityTextOutlineColor => inheritedData.unityTextOutlineColor;
        public float unityTextOutlineWidth => inheritedData.unityTextOutlineWidth;
        public TextOverflowPosition unityTextOverflowPosition => nonInheritedData.unityTextOverflowPosition;
        public Visibility visibility => inheritedData.visibility;
        public WhiteSpace whiteSpace => inheritedData.whiteSpace;
        public Length width => nonInheritedData.width;
        public Length wordSpacing => inheritedData.wordSpacing;

        public void CopyFrom(ComputedStyle other)
        {
            inheritedData = other.inheritedData;
            nonInheritedData = other.nonInheritedData;
        }

        public void ApplyProperties(StylePropertyReader reader, ComputedStyle parentStyle)
        {
            for (var id = reader.propertyId; id != StylePropertyId.Unknown; id = reader.MoveNextProperty())
            {
                if (ApplyGlobalKeyword(reader, parentStyle))
                    continue;
                switch (id)
                {
                    case StylePropertyId.AlignContent:
                        nonInheritedData.alignContent = (Align)reader.ReadEnum(StyleEnumType.Align, 0);
                        break;
                    case StylePropertyId.AlignItems:
                        nonInheritedData.alignItems = (Align)reader.ReadEnum(StyleEnumType.Align, 0);
                        break;
                    case StylePropertyId.AlignSelf:
                        nonInheritedData.alignSelf = (Align)reader.ReadEnum(StyleEnumType.Align, 0);
                        break;
                    case StylePropertyId.BackgroundColor:
                        nonInheritedData.backgroundColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.BackgroundImage:
                        nonInheritedData.backgroundImage = reader.ReadBackground(0);
                        break;
                    case StylePropertyId.BorderBottomColor:
                        nonInheritedData.borderBottomColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.BorderBottomLeftRadius:
                        nonInheritedData.borderBottomLeftRadius = reader.ReadLength(0);
                        break;
                    case StylePropertyId.BorderBottomRightRadius:
                        nonInheritedData.borderBottomRightRadius = reader.ReadLength(0);
                        break;
                    case StylePropertyId.BorderBottomWidth:
                        nonInheritedData.borderBottomWidth = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.BorderColor:
                        ShorthandApplicator.ApplyBorderColor(reader, this);
                        break;
                    case StylePropertyId.BorderLeftColor:
                        nonInheritedData.borderLeftColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.BorderLeftWidth:
                        nonInheritedData.borderLeftWidth = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.BorderRadius:
                        ShorthandApplicator.ApplyBorderRadius(reader, this);
                        break;
                    case StylePropertyId.BorderRightColor:
                        nonInheritedData.borderRightColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.BorderRightWidth:
                        nonInheritedData.borderRightWidth = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.BorderTopColor:
                        nonInheritedData.borderTopColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.BorderTopLeftRadius:
                        nonInheritedData.borderTopLeftRadius = reader.ReadLength(0);
                        break;
                    case StylePropertyId.BorderTopRightRadius:
                        nonInheritedData.borderTopRightRadius = reader.ReadLength(0);
                        break;
                    case StylePropertyId.BorderTopWidth:
                        nonInheritedData.borderTopWidth = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.BorderWidth:
                        ShorthandApplicator.ApplyBorderWidth(reader, this);
                        break;
                    case StylePropertyId.Bottom:
                        nonInheritedData.bottom = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Color:
                        inheritedData.color = reader.ReadColor(0);
                        break;
                    case StylePropertyId.Cursor:
                        nonInheritedData.cursor = reader.ReadCursor(0);
                        break;
                    case StylePropertyId.Display:
                        nonInheritedData.display = (DisplayStyle)reader.ReadEnum(StyleEnumType.DisplayStyle, 0);
                        break;
                    case StylePropertyId.Flex:
                        ShorthandApplicator.ApplyFlex(reader, this);
                        break;
                    case StylePropertyId.FlexBasis:
                        nonInheritedData.flexBasis = reader.ReadLength(0);
                        break;
                    case StylePropertyId.FlexDirection:
                        nonInheritedData.flexDirection = (FlexDirection)reader.ReadEnum(StyleEnumType.FlexDirection, 0);
                        break;
                    case StylePropertyId.FlexGrow:
                        nonInheritedData.flexGrow = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.FlexShrink:
                        nonInheritedData.flexShrink = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.FlexWrap:
                        nonInheritedData.flexWrap = (Wrap)reader.ReadEnum(StyleEnumType.Wrap, 0);
                        break;
                    case StylePropertyId.FontSize:
                        inheritedData.fontSize = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Height:
                        nonInheritedData.height = reader.ReadLength(0);
                        break;
                    case StylePropertyId.JustifyContent:
                        nonInheritedData.justifyContent = (Justify)reader.ReadEnum(StyleEnumType.Justify, 0);
                        break;
                    case StylePropertyId.Left:
                        nonInheritedData.left = reader.ReadLength(0);
                        break;
                    case StylePropertyId.LetterSpacing:
                        inheritedData.letterSpacing = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Margin:
                        ShorthandApplicator.ApplyMargin(reader, this);
                        break;
                    case StylePropertyId.MarginBottom:
                        nonInheritedData.marginBottom = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MarginLeft:
                        nonInheritedData.marginLeft = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MarginRight:
                        nonInheritedData.marginRight = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MarginTop:
                        nonInheritedData.marginTop = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MaxHeight:
                        nonInheritedData.maxHeight = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MaxWidth:
                        nonInheritedData.maxWidth = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MinHeight:
                        nonInheritedData.minHeight = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MinWidth:
                        nonInheritedData.minWidth = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Opacity:
                        nonInheritedData.opacity = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.Overflow:
                        nonInheritedData.overflow = (OverflowInternal)reader.ReadEnum(StyleEnumType.OverflowInternal, 0);
                        break;
                    case StylePropertyId.Padding:
                        ShorthandApplicator.ApplyPadding(reader, this);
                        break;
                    case StylePropertyId.PaddingBottom:
                        nonInheritedData.paddingBottom = reader.ReadLength(0);
                        break;
                    case StylePropertyId.PaddingLeft:
                        nonInheritedData.paddingLeft = reader.ReadLength(0);
                        break;
                    case StylePropertyId.PaddingRight:
                        nonInheritedData.paddingRight = reader.ReadLength(0);
                        break;
                    case StylePropertyId.PaddingTop:
                        nonInheritedData.paddingTop = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Position:
                        nonInheritedData.position = (Position)reader.ReadEnum(StyleEnumType.Position, 0);
                        break;
                    case StylePropertyId.Right:
                        nonInheritedData.right = reader.ReadLength(0);
                        break;
                    case StylePropertyId.TextOverflow:
                        nonInheritedData.textOverflow = (TextOverflow)reader.ReadEnum(StyleEnumType.TextOverflow, 0);
                        break;
                    case StylePropertyId.TextShadow:
                        inheritedData.textShadow = reader.ReadTextShadow(0);
                        break;
                    case StylePropertyId.Top:
                        nonInheritedData.top = reader.ReadLength(0);
                        break;
                    case StylePropertyId.UnityBackgroundImageTintColor:
                        nonInheritedData.unityBackgroundImageTintColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.UnityBackgroundScaleMode:
                        nonInheritedData.unityBackgroundScaleMode = (ScaleMode)reader.ReadEnum(StyleEnumType.ScaleMode, 0);
                        break;
                    case StylePropertyId.UnityFont:
                        inheritedData.unityFont = reader.ReadFont(0);
                        break;
                    case StylePropertyId.UnityFontDefinition:
                        inheritedData.unityFontDefinition = reader.ReadFontDefinition(0);
                        break;
                    case StylePropertyId.UnityFontStyleAndWeight:
                        inheritedData.unityFontStyleAndWeight = (FontStyle)reader.ReadEnum(StyleEnumType.FontStyle, 0);
                        break;
                    case StylePropertyId.UnityOverflowClipBox:
                        nonInheritedData.unityOverflowClipBox = (OverflowClipBox)reader.ReadEnum(StyleEnumType.OverflowClipBox, 0);
                        break;
                    case StylePropertyId.UnityParagraphSpacing:
                        inheritedData.unityParagraphSpacing = reader.ReadLength(0);
                        break;
                    case StylePropertyId.UnitySliceBottom:
                        nonInheritedData.unitySliceBottom = reader.ReadInt(0);
                        break;
                    case StylePropertyId.UnitySliceLeft:
                        nonInheritedData.unitySliceLeft = reader.ReadInt(0);
                        break;
                    case StylePropertyId.UnitySliceRight:
                        nonInheritedData.unitySliceRight = reader.ReadInt(0);
                        break;
                    case StylePropertyId.UnitySliceTop:
                        nonInheritedData.unitySliceTop = reader.ReadInt(0);
                        break;
                    case StylePropertyId.UnityTextAlign:
                        inheritedData.unityTextAlign = (TextAnchor)reader.ReadEnum(StyleEnumType.TextAnchor, 0);
                        break;
                    case StylePropertyId.UnityTextOutline:
                        ShorthandApplicator.ApplyUnityTextOutline(reader, this);
                        break;
                    case StylePropertyId.UnityTextOutlineColor:
                        inheritedData.unityTextOutlineColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.UnityTextOutlineWidth:
                        inheritedData.unityTextOutlineWidth = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.UnityTextOverflowPosition:
                        nonInheritedData.unityTextOverflowPosition = (TextOverflowPosition)reader.ReadEnum(StyleEnumType.TextOverflowPosition, 0);
                        break;
                    case StylePropertyId.Visibility:
                        inheritedData.visibility = (Visibility)reader.ReadEnum(StyleEnumType.Visibility, 0);
                        break;
                    case StylePropertyId.WhiteSpace:
                        inheritedData.whiteSpace = (WhiteSpace)reader.ReadEnum(StyleEnumType.WhiteSpace, 0);
                        break;
                    case StylePropertyId.Width:
                        nonInheritedData.width = reader.ReadLength(0);
                        break;
                    case StylePropertyId.WordSpacing:
                        inheritedData.wordSpacing = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Custom:
                        ApplyCustomStyleProperty(reader);
                        break;
                    default:
                        Debug.LogAssertion($"Unknown property id {id}");
                        break;
                }
            }
        }

        public void ApplyStyleValue(StyleValue sv, ComputedStyle parentStyle)
        {
            if (ApplyGlobalKeyword(sv, parentStyle))
                return;
            switch (sv.id)
            {
                case StylePropertyId.AlignContent:
                    nonInheritedData.alignContent = (Align)sv.number;
                    if (sv.keyword == StyleKeyword.Auto)
                        nonInheritedData.alignContent = Align.Auto;
                    break;
                case StylePropertyId.AlignItems:
                    nonInheritedData.alignItems = (Align)sv.number;
                    if (sv.keyword == StyleKeyword.Auto)
                        nonInheritedData.alignItems = Align.Auto;
                    break;
                case StylePropertyId.AlignSelf:
                    nonInheritedData.alignSelf = (Align)sv.number;
                    if (sv.keyword == StyleKeyword.Auto)
                        nonInheritedData.alignSelf = Align.Auto;
                    break;
                case StylePropertyId.BackgroundColor:
                    nonInheritedData.backgroundColor = sv.color;
                    break;
                case StylePropertyId.BackgroundImage:
                    nonInheritedData.backgroundImage = sv.resource.IsAllocated ? Background.FromObject(sv.resource.Target) : new Background();
                    break;
                case StylePropertyId.BorderBottomColor:
                    nonInheritedData.borderBottomColor = sv.color;
                    break;
                case StylePropertyId.BorderBottomLeftRadius:
                    nonInheritedData.borderBottomLeftRadius = sv.length;
                    break;
                case StylePropertyId.BorderBottomRightRadius:
                    nonInheritedData.borderBottomRightRadius = sv.length;
                    break;
                case StylePropertyId.BorderBottomWidth:
                    nonInheritedData.borderBottomWidth = sv.number;
                    break;
                case StylePropertyId.BorderLeftColor:
                    nonInheritedData.borderLeftColor = sv.color;
                    break;
                case StylePropertyId.BorderLeftWidth:
                    nonInheritedData.borderLeftWidth = sv.number;
                    break;
                case StylePropertyId.BorderRightColor:
                    nonInheritedData.borderRightColor = sv.color;
                    break;
                case StylePropertyId.BorderRightWidth:
                    nonInheritedData.borderRightWidth = sv.number;
                    break;
                case StylePropertyId.BorderTopColor:
                    nonInheritedData.borderTopColor = sv.color;
                    break;
                case StylePropertyId.BorderTopLeftRadius:
                    nonInheritedData.borderTopLeftRadius = sv.length;
                    break;
                case StylePropertyId.BorderTopRightRadius:
                    nonInheritedData.borderTopRightRadius = sv.length;
                    break;
                case StylePropertyId.BorderTopWidth:
                    nonInheritedData.borderTopWidth = sv.number;
                    break;
                case StylePropertyId.Bottom:
                    nonInheritedData.bottom = sv.length;
                    break;
                case StylePropertyId.Color:
                    inheritedData.color = sv.color;
                    break;
                case StylePropertyId.Display:
                    nonInheritedData.display = (DisplayStyle)sv.number;
                    if (sv.keyword == StyleKeyword.None)
                        nonInheritedData.display = DisplayStyle.None;
                    break;
                case StylePropertyId.FlexBasis:
                    nonInheritedData.flexBasis = sv.length;
                    break;
                case StylePropertyId.FlexDirection:
                    nonInheritedData.flexDirection = (FlexDirection)sv.number;
                    break;
                case StylePropertyId.FlexGrow:
                    nonInheritedData.flexGrow = sv.number;
                    break;
                case StylePropertyId.FlexShrink:
                    nonInheritedData.flexShrink = sv.number;
                    break;
                case StylePropertyId.FlexWrap:
                    nonInheritedData.flexWrap = (Wrap)sv.number;
                    break;
                case StylePropertyId.FontSize:
                    inheritedData.fontSize = sv.length;
                    break;
                case StylePropertyId.Height:
                    nonInheritedData.height = sv.length;
                    break;
                case StylePropertyId.JustifyContent:
                    nonInheritedData.justifyContent = (Justify)sv.number;
                    break;
                case StylePropertyId.Left:
                    nonInheritedData.left = sv.length;
                    break;
                case StylePropertyId.LetterSpacing:
                    inheritedData.letterSpacing = sv.length;
                    break;
                case StylePropertyId.MarginBottom:
                    nonInheritedData.marginBottom = sv.length;
                    break;
                case StylePropertyId.MarginLeft:
                    nonInheritedData.marginLeft = sv.length;
                    break;
                case StylePropertyId.MarginRight:
                    nonInheritedData.marginRight = sv.length;
                    break;
                case StylePropertyId.MarginTop:
                    nonInheritedData.marginTop = sv.length;
                    break;
                case StylePropertyId.MaxHeight:
                    nonInheritedData.maxHeight = sv.length;
                    break;
                case StylePropertyId.MaxWidth:
                    nonInheritedData.maxWidth = sv.length;
                    break;
                case StylePropertyId.MinHeight:
                    nonInheritedData.minHeight = sv.length;
                    break;
                case StylePropertyId.MinWidth:
                    nonInheritedData.minWidth = sv.length;
                    break;
                case StylePropertyId.Opacity:
                    nonInheritedData.opacity = sv.number;
                    break;
                case StylePropertyId.Overflow:
                    nonInheritedData.overflow = (OverflowInternal)sv.number;
                    break;
                case StylePropertyId.PaddingBottom:
                    nonInheritedData.paddingBottom = sv.length;
                    break;
                case StylePropertyId.PaddingLeft:
                    nonInheritedData.paddingLeft = sv.length;
                    break;
                case StylePropertyId.PaddingRight:
                    nonInheritedData.paddingRight = sv.length;
                    break;
                case StylePropertyId.PaddingTop:
                    nonInheritedData.paddingTop = sv.length;
                    break;
                case StylePropertyId.Position:
                    nonInheritedData.position = (Position)sv.number;
                    break;
                case StylePropertyId.Right:
                    nonInheritedData.right = sv.length;
                    break;
                case StylePropertyId.TextOverflow:
                    nonInheritedData.textOverflow = (TextOverflow)sv.number;
                    break;
                case StylePropertyId.Top:
                    nonInheritedData.top = sv.length;
                    break;
                case StylePropertyId.UnityBackgroundImageTintColor:
                    nonInheritedData.unityBackgroundImageTintColor = sv.color;
                    break;
                case StylePropertyId.UnityBackgroundScaleMode:
                    nonInheritedData.unityBackgroundScaleMode = (ScaleMode)sv.number;
                    break;
                case StylePropertyId.UnityFont:
                    inheritedData.unityFont = sv.resource.IsAllocated ? sv.resource.Target as Font : null;
                    break;
                case StylePropertyId.UnityFontDefinition:
                    inheritedData.unityFontDefinition = sv.resource.IsAllocated ? FontDefinition.FromObject(sv.resource.Target) : new FontDefinition();
                    break;
                case StylePropertyId.UnityFontStyleAndWeight:
                    inheritedData.unityFontStyleAndWeight = (FontStyle)sv.number;
                    break;
                case StylePropertyId.UnityOverflowClipBox:
                    nonInheritedData.unityOverflowClipBox = (OverflowClipBox)sv.number;
                    break;
                case StylePropertyId.UnityParagraphSpacing:
                    inheritedData.unityParagraphSpacing = sv.length;
                    break;
                case StylePropertyId.UnitySliceBottom:
                    nonInheritedData.unitySliceBottom = (int)sv.number;
                    break;
                case StylePropertyId.UnitySliceLeft:
                    nonInheritedData.unitySliceLeft = (int)sv.number;
                    break;
                case StylePropertyId.UnitySliceRight:
                    nonInheritedData.unitySliceRight = (int)sv.number;
                    break;
                case StylePropertyId.UnitySliceTop:
                    nonInheritedData.unitySliceTop = (int)sv.number;
                    break;
                case StylePropertyId.UnityTextAlign:
                    inheritedData.unityTextAlign = (TextAnchor)sv.number;
                    break;
                case StylePropertyId.UnityTextOutlineColor:
                    inheritedData.unityTextOutlineColor = sv.color;
                    break;
                case StylePropertyId.UnityTextOutlineWidth:
                    inheritedData.unityTextOutlineWidth = sv.number;
                    break;
                case StylePropertyId.UnityTextOverflowPosition:
                    nonInheritedData.unityTextOverflowPosition = (TextOverflowPosition)sv.number;
                    break;
                case StylePropertyId.Visibility:
                    inheritedData.visibility = (Visibility)sv.number;
                    break;
                case StylePropertyId.WhiteSpace:
                    inheritedData.whiteSpace = (WhiteSpace)sv.number;
                    break;
                case StylePropertyId.Width:
                    nonInheritedData.width = sv.length;
                    break;
                case StylePropertyId.WordSpacing:
                    inheritedData.wordSpacing = sv.length;
                    break;
                default:
                    Debug.LogAssertion($"Unexpected property id {sv.id}");
                    break;
            }
        }

        public void ApplyStyleCursor(Cursor cursor)
        {
            nonInheritedData.cursor = cursor;
        }

        public void ApplyStyleTextShadow(TextShadow st)
        {
            inheritedData.textShadow = st;
        }

        public void ApplyInitialValue(StylePropertyReader reader)
        {
            switch (reader.propertyId)
            {
                case StylePropertyId.Custom:
                    RemoveCustomStyleProperty(reader);
                    break;
                default:
                    ApplyInitialValue(reader.propertyId);
                    break;
            }
        }

        public void ApplyInitialValue(StylePropertyId id)
        {
            switch (id)
            {
                case StylePropertyId.AlignContent:
                    nonInheritedData.alignContent = InitialStyle.alignContent;
                    break;
                case StylePropertyId.AlignItems:
                    nonInheritedData.alignItems = InitialStyle.alignItems;
                    break;
                case StylePropertyId.AlignSelf:
                    nonInheritedData.alignSelf = InitialStyle.alignSelf;
                    break;
                case StylePropertyId.BackgroundColor:
                    nonInheritedData.backgroundColor = InitialStyle.backgroundColor;
                    break;
                case StylePropertyId.BackgroundImage:
                    nonInheritedData.backgroundImage = InitialStyle.backgroundImage;
                    break;
                case StylePropertyId.BorderBottomColor:
                    nonInheritedData.borderBottomColor = InitialStyle.borderBottomColor;
                    break;
                case StylePropertyId.BorderBottomLeftRadius:
                    nonInheritedData.borderBottomLeftRadius = InitialStyle.borderBottomLeftRadius;
                    break;
                case StylePropertyId.BorderBottomRightRadius:
                    nonInheritedData.borderBottomRightRadius = InitialStyle.borderBottomRightRadius;
                    break;
                case StylePropertyId.BorderBottomWidth:
                    nonInheritedData.borderBottomWidth = InitialStyle.borderBottomWidth;
                    break;
                case StylePropertyId.BorderColor:
                    nonInheritedData.borderTopColor = InitialStyle.borderTopColor;
                    nonInheritedData.borderRightColor = InitialStyle.borderRightColor;
                    nonInheritedData.borderBottomColor = InitialStyle.borderBottomColor;
                    nonInheritedData.borderLeftColor = InitialStyle.borderLeftColor;
                    break;
                case StylePropertyId.BorderLeftColor:
                    nonInheritedData.borderLeftColor = InitialStyle.borderLeftColor;
                    break;
                case StylePropertyId.BorderLeftWidth:
                    nonInheritedData.borderLeftWidth = InitialStyle.borderLeftWidth;
                    break;
                case StylePropertyId.BorderRadius:
                    nonInheritedData.borderTopLeftRadius = InitialStyle.borderTopLeftRadius;
                    nonInheritedData.borderTopRightRadius = InitialStyle.borderTopRightRadius;
                    nonInheritedData.borderBottomRightRadius = InitialStyle.borderBottomRightRadius;
                    nonInheritedData.borderBottomLeftRadius = InitialStyle.borderBottomLeftRadius;
                    break;
                case StylePropertyId.BorderRightColor:
                    nonInheritedData.borderRightColor = InitialStyle.borderRightColor;
                    break;
                case StylePropertyId.BorderRightWidth:
                    nonInheritedData.borderRightWidth = InitialStyle.borderRightWidth;
                    break;
                case StylePropertyId.BorderTopColor:
                    nonInheritedData.borderTopColor = InitialStyle.borderTopColor;
                    break;
                case StylePropertyId.BorderTopLeftRadius:
                    nonInheritedData.borderTopLeftRadius = InitialStyle.borderTopLeftRadius;
                    break;
                case StylePropertyId.BorderTopRightRadius:
                    nonInheritedData.borderTopRightRadius = InitialStyle.borderTopRightRadius;
                    break;
                case StylePropertyId.BorderTopWidth:
                    nonInheritedData.borderTopWidth = InitialStyle.borderTopWidth;
                    break;
                case StylePropertyId.BorderWidth:
                    nonInheritedData.borderTopWidth = InitialStyle.borderTopWidth;
                    nonInheritedData.borderRightWidth = InitialStyle.borderRightWidth;
                    nonInheritedData.borderBottomWidth = InitialStyle.borderBottomWidth;
                    nonInheritedData.borderLeftWidth = InitialStyle.borderLeftWidth;
                    break;
                case StylePropertyId.Bottom:
                    nonInheritedData.bottom = InitialStyle.bottom;
                    break;
                case StylePropertyId.Color:
                    inheritedData.color = InitialStyle.color;
                    break;
                case StylePropertyId.Cursor:
                    nonInheritedData.cursor = InitialStyle.cursor;
                    break;
                case StylePropertyId.Display:
                    nonInheritedData.display = InitialStyle.display;
                    break;
                case StylePropertyId.Flex:
                    nonInheritedData.flexGrow = InitialStyle.flexGrow;
                    nonInheritedData.flexShrink = InitialStyle.flexShrink;
                    nonInheritedData.flexBasis = InitialStyle.flexBasis;
                    break;
                case StylePropertyId.FlexBasis:
                    nonInheritedData.flexBasis = InitialStyle.flexBasis;
                    break;
                case StylePropertyId.FlexDirection:
                    nonInheritedData.flexDirection = InitialStyle.flexDirection;
                    break;
                case StylePropertyId.FlexGrow:
                    nonInheritedData.flexGrow = InitialStyle.flexGrow;
                    break;
                case StylePropertyId.FlexShrink:
                    nonInheritedData.flexShrink = InitialStyle.flexShrink;
                    break;
                case StylePropertyId.FlexWrap:
                    nonInheritedData.flexWrap = InitialStyle.flexWrap;
                    break;
                case StylePropertyId.FontSize:
                    inheritedData.fontSize = InitialStyle.fontSize;
                    break;
                case StylePropertyId.Height:
                    nonInheritedData.height = InitialStyle.height;
                    break;
                case StylePropertyId.JustifyContent:
                    nonInheritedData.justifyContent = InitialStyle.justifyContent;
                    break;
                case StylePropertyId.Left:
                    nonInheritedData.left = InitialStyle.left;
                    break;
                case StylePropertyId.LetterSpacing:
                    inheritedData.letterSpacing = InitialStyle.letterSpacing;
                    break;
                case StylePropertyId.Margin:
                    nonInheritedData.marginTop = InitialStyle.marginTop;
                    nonInheritedData.marginRight = InitialStyle.marginRight;
                    nonInheritedData.marginBottom = InitialStyle.marginBottom;
                    nonInheritedData.marginLeft = InitialStyle.marginLeft;
                    break;
                case StylePropertyId.MarginBottom:
                    nonInheritedData.marginBottom = InitialStyle.marginBottom;
                    break;
                case StylePropertyId.MarginLeft:
                    nonInheritedData.marginLeft = InitialStyle.marginLeft;
                    break;
                case StylePropertyId.MarginRight:
                    nonInheritedData.marginRight = InitialStyle.marginRight;
                    break;
                case StylePropertyId.MarginTop:
                    nonInheritedData.marginTop = InitialStyle.marginTop;
                    break;
                case StylePropertyId.MaxHeight:
                    nonInheritedData.maxHeight = InitialStyle.maxHeight;
                    break;
                case StylePropertyId.MaxWidth:
                    nonInheritedData.maxWidth = InitialStyle.maxWidth;
                    break;
                case StylePropertyId.MinHeight:
                    nonInheritedData.minHeight = InitialStyle.minHeight;
                    break;
                case StylePropertyId.MinWidth:
                    nonInheritedData.minWidth = InitialStyle.minWidth;
                    break;
                case StylePropertyId.Opacity:
                    nonInheritedData.opacity = InitialStyle.opacity;
                    break;
                case StylePropertyId.Overflow:
                    nonInheritedData.overflow = InitialStyle.overflow;
                    break;
                case StylePropertyId.Padding:
                    nonInheritedData.paddingTop = InitialStyle.paddingTop;
                    nonInheritedData.paddingRight = InitialStyle.paddingRight;
                    nonInheritedData.paddingBottom = InitialStyle.paddingBottom;
                    nonInheritedData.paddingLeft = InitialStyle.paddingLeft;
                    break;
                case StylePropertyId.PaddingBottom:
                    nonInheritedData.paddingBottom = InitialStyle.paddingBottom;
                    break;
                case StylePropertyId.PaddingLeft:
                    nonInheritedData.paddingLeft = InitialStyle.paddingLeft;
                    break;
                case StylePropertyId.PaddingRight:
                    nonInheritedData.paddingRight = InitialStyle.paddingRight;
                    break;
                case StylePropertyId.PaddingTop:
                    nonInheritedData.paddingTop = InitialStyle.paddingTop;
                    break;
                case StylePropertyId.Position:
                    nonInheritedData.position = InitialStyle.position;
                    break;
                case StylePropertyId.Right:
                    nonInheritedData.right = InitialStyle.right;
                    break;
                case StylePropertyId.TextOverflow:
                    nonInheritedData.textOverflow = InitialStyle.textOverflow;
                    break;
                case StylePropertyId.TextShadow:
                    inheritedData.textShadow = InitialStyle.textShadow;
                    break;
                case StylePropertyId.Top:
                    nonInheritedData.top = InitialStyle.top;
                    break;
                case StylePropertyId.UnityBackgroundImageTintColor:
                    nonInheritedData.unityBackgroundImageTintColor = InitialStyle.unityBackgroundImageTintColor;
                    break;
                case StylePropertyId.UnityBackgroundScaleMode:
                    nonInheritedData.unityBackgroundScaleMode = InitialStyle.unityBackgroundScaleMode;
                    break;
                case StylePropertyId.UnityFont:
                    inheritedData.unityFont = InitialStyle.unityFont;
                    break;
                case StylePropertyId.UnityFontDefinition:
                    inheritedData.unityFontDefinition = InitialStyle.unityFontDefinition;
                    break;
                case StylePropertyId.UnityFontStyleAndWeight:
                    inheritedData.unityFontStyleAndWeight = InitialStyle.unityFontStyleAndWeight;
                    break;
                case StylePropertyId.UnityOverflowClipBox:
                    nonInheritedData.unityOverflowClipBox = InitialStyle.unityOverflowClipBox;
                    break;
                case StylePropertyId.UnityParagraphSpacing:
                    inheritedData.unityParagraphSpacing = InitialStyle.unityParagraphSpacing;
                    break;
                case StylePropertyId.UnitySliceBottom:
                    nonInheritedData.unitySliceBottom = InitialStyle.unitySliceBottom;
                    break;
                case StylePropertyId.UnitySliceLeft:
                    nonInheritedData.unitySliceLeft = InitialStyle.unitySliceLeft;
                    break;
                case StylePropertyId.UnitySliceRight:
                    nonInheritedData.unitySliceRight = InitialStyle.unitySliceRight;
                    break;
                case StylePropertyId.UnitySliceTop:
                    nonInheritedData.unitySliceTop = InitialStyle.unitySliceTop;
                    break;
                case StylePropertyId.UnityTextAlign:
                    inheritedData.unityTextAlign = InitialStyle.unityTextAlign;
                    break;
                case StylePropertyId.UnityTextOutline:
                    inheritedData.unityTextOutlineColor = InitialStyle.unityTextOutlineColor;
                    inheritedData.unityTextOutlineWidth = InitialStyle.unityTextOutlineWidth;
                    break;
                case StylePropertyId.UnityTextOutlineColor:
                    inheritedData.unityTextOutlineColor = InitialStyle.unityTextOutlineColor;
                    break;
                case StylePropertyId.UnityTextOutlineWidth:
                    inheritedData.unityTextOutlineWidth = InitialStyle.unityTextOutlineWidth;
                    break;
                case StylePropertyId.UnityTextOverflowPosition:
                    nonInheritedData.unityTextOverflowPosition = InitialStyle.unityTextOverflowPosition;
                    break;
                case StylePropertyId.Visibility:
                    inheritedData.visibility = InitialStyle.visibility;
                    break;
                case StylePropertyId.WhiteSpace:
                    inheritedData.whiteSpace = InitialStyle.whiteSpace;
                    break;
                case StylePropertyId.Width:
                    nonInheritedData.width = InitialStyle.width;
                    break;
                case StylePropertyId.WordSpacing:
                    inheritedData.wordSpacing = InitialStyle.wordSpacing;
                    break;
                default:
                    Debug.LogAssertion($"Unexpected property id {id}");
                    break;
            }
        }

        public void ApplyUnsetValue(StylePropertyReader reader, ComputedStyle parentStyle)
        {
            switch (reader.propertyId)
            {
                case StylePropertyId.Custom:
                    RemoveCustomStyleProperty(reader);
                    break;
                default:
                    ApplyUnsetValue(reader.propertyId, parentStyle);
                    break;
            }
        }

        public void ApplyUnsetValue(StylePropertyId id, ComputedStyle parentStyle)
        {
            switch (id)
            {
                case StylePropertyId.Color:
                    inheritedData.color = parentStyle.color;
                    break;
                case StylePropertyId.FontSize:
                    inheritedData.fontSize = parentStyle.fontSize;
                    break;
                case StylePropertyId.LetterSpacing:
                    inheritedData.letterSpacing = parentStyle.letterSpacing;
                    break;
                case StylePropertyId.TextShadow:
                    inheritedData.textShadow = parentStyle.textShadow;
                    break;
                case StylePropertyId.UnityFont:
                    inheritedData.unityFont = parentStyle.unityFont;
                    break;
                case StylePropertyId.UnityFontDefinition:
                    inheritedData.unityFontDefinition = parentStyle.unityFontDefinition;
                    break;
                case StylePropertyId.UnityFontStyleAndWeight:
                    inheritedData.unityFontStyleAndWeight = parentStyle.unityFontStyleAndWeight;
                    break;
                case StylePropertyId.UnityParagraphSpacing:
                    inheritedData.unityParagraphSpacing = parentStyle.unityParagraphSpacing;
                    break;
                case StylePropertyId.UnityTextAlign:
                    inheritedData.unityTextAlign = parentStyle.unityTextAlign;
                    break;
                case StylePropertyId.UnityTextOutlineColor:
                    inheritedData.unityTextOutlineColor = parentStyle.unityTextOutlineColor;
                    break;
                case StylePropertyId.UnityTextOutlineWidth:
                    inheritedData.unityTextOutlineWidth = parentStyle.unityTextOutlineWidth;
                    break;
                case StylePropertyId.Visibility:
                    inheritedData.visibility = parentStyle.visibility;
                    break;
                case StylePropertyId.WhiteSpace:
                    inheritedData.whiteSpace = parentStyle.whiteSpace;
                    break;
                case StylePropertyId.WordSpacing:
                    inheritedData.wordSpacing = parentStyle.wordSpacing;
                    break;
                default:
                    ApplyInitialValue(id);
                    break;
            }
        }
    }
}
