/******************************************************************************/
//
//                             DO NOT MODIFY
//          This file has been generated by the UIElementsGenerator tool
//              See ComputedStyleCsGenerator class for details
//
/******************************************************************************/
using System;
using System.Collections.Generic;
using UnityEngine.UIElements.StyleSheets;
using UnityEngine.Yoga;

namespace UnityEngine.UIElements
{
    internal partial struct ComputedStyle
    {
        public StyleDataRef<InheritedData> inheritedData;
        public StyleDataRef<LayoutData> layoutData;
        public StyleDataRef<RareData> rareData;
        public StyleDataRef<VisualData> visualData;

        public YogaNode yogaNode;
        public Dictionary<string, StylePropertyValue> customProperties;
        public Int64 matchingRulesHash;
        public float dpiScaling;

        public Align alignContent => layoutData.Read().alignContent;
        public Align alignItems => layoutData.Read().alignItems;
        public Align alignSelf => layoutData.Read().alignSelf;
        public Color backgroundColor => visualData.Read().backgroundColor;
        public Background backgroundImage => visualData.Read().backgroundImage;
        public Color borderBottomColor => visualData.Read().borderBottomColor;
        public Length borderBottomLeftRadius => visualData.Read().borderBottomLeftRadius;
        public Length borderBottomRightRadius => visualData.Read().borderBottomRightRadius;
        public float borderBottomWidth => layoutData.Read().borderBottomWidth;
        public Color borderLeftColor => visualData.Read().borderLeftColor;
        public float borderLeftWidth => layoutData.Read().borderLeftWidth;
        public Color borderRightColor => visualData.Read().borderRightColor;
        public float borderRightWidth => layoutData.Read().borderRightWidth;
        public Color borderTopColor => visualData.Read().borderTopColor;
        public Length borderTopLeftRadius => visualData.Read().borderTopLeftRadius;
        public Length borderTopRightRadius => visualData.Read().borderTopRightRadius;
        public float borderTopWidth => layoutData.Read().borderTopWidth;
        public Length bottom => layoutData.Read().bottom;
        public Color color => inheritedData.Read().color;
        public Cursor cursor => rareData.Read().cursor;
        public DisplayStyle display => layoutData.Read().display;
        public Length flexBasis => layoutData.Read().flexBasis;
        public FlexDirection flexDirection => layoutData.Read().flexDirection;
        public float flexGrow => layoutData.Read().flexGrow;
        public float flexShrink => layoutData.Read().flexShrink;
        public Wrap flexWrap => layoutData.Read().flexWrap;
        public Length fontSize => inheritedData.Read().fontSize;
        public Length height => layoutData.Read().height;
        public Justify justifyContent => layoutData.Read().justifyContent;
        public Length left => layoutData.Read().left;
        public Length letterSpacing => inheritedData.Read().letterSpacing;
        public Length marginBottom => layoutData.Read().marginBottom;
        public Length marginLeft => layoutData.Read().marginLeft;
        public Length marginRight => layoutData.Read().marginRight;
        public Length marginTop => layoutData.Read().marginTop;
        public Length maxHeight => layoutData.Read().maxHeight;
        public Length maxWidth => layoutData.Read().maxWidth;
        public Length minHeight => layoutData.Read().minHeight;
        public Length minWidth => layoutData.Read().minWidth;
        public float opacity => visualData.Read().opacity;
        public OverflowInternal overflow => visualData.Read().overflow;
        public Length paddingBottom => layoutData.Read().paddingBottom;
        public Length paddingLeft => layoutData.Read().paddingLeft;
        public Length paddingRight => layoutData.Read().paddingRight;
        public Length paddingTop => layoutData.Read().paddingTop;
        public Position position => layoutData.Read().position;
        public Length right => layoutData.Read().right;
        public TextOverflow textOverflow => rareData.Read().textOverflow;
        public TextShadow textShadow => inheritedData.Read().textShadow;
        public Length top => layoutData.Read().top;
        public Color unityBackgroundImageTintColor => rareData.Read().unityBackgroundImageTintColor;
        public ScaleMode unityBackgroundScaleMode => rareData.Read().unityBackgroundScaleMode;
        public Font unityFont => inheritedData.Read().unityFont;
        public FontDefinition unityFontDefinition => inheritedData.Read().unityFontDefinition;
        public FontStyle unityFontStyleAndWeight => inheritedData.Read().unityFontStyleAndWeight;
        public OverflowClipBox unityOverflowClipBox => rareData.Read().unityOverflowClipBox;
        public Length unityParagraphSpacing => inheritedData.Read().unityParagraphSpacing;
        public int unitySliceBottom => rareData.Read().unitySliceBottom;
        public int unitySliceLeft => rareData.Read().unitySliceLeft;
        public int unitySliceRight => rareData.Read().unitySliceRight;
        public int unitySliceTop => rareData.Read().unitySliceTop;
        public TextAnchor unityTextAlign => inheritedData.Read().unityTextAlign;
        public Color unityTextOutlineColor => inheritedData.Read().unityTextOutlineColor;
        public float unityTextOutlineWidth => inheritedData.Read().unityTextOutlineWidth;
        public TextOverflowPosition unityTextOverflowPosition => rareData.Read().unityTextOverflowPosition;
        public Visibility visibility => inheritedData.Read().visibility;
        public WhiteSpace whiteSpace => inheritedData.Read().whiteSpace;
        public Length width => layoutData.Read().width;
        public Length wordSpacing => inheritedData.Read().wordSpacing;

        public static ComputedStyle Create(ref ComputedStyle parentStyle)
        {
            ref var initialStyle = ref InitialStyle.Get();
            var cs = new ComputedStyle {dpiScaling = 1f};
            cs.inheritedData = parentStyle.inheritedData.Acquire();
            cs.layoutData = initialStyle.layoutData.Acquire();
            cs.rareData = initialStyle.rareData.Acquire();
            cs.visualData = initialStyle.visualData.Acquire();
            return cs;
        }

        public static ComputedStyle CreateInitial()
        {
            var cs = new ComputedStyle {dpiScaling = 1f};
            cs.inheritedData = StyleDataRef<InheritedData>.Create();
            cs.layoutData = StyleDataRef<LayoutData>.Create();
            cs.rareData = StyleDataRef<RareData>.Create();
            cs.visualData = StyleDataRef<VisualData>.Create();
            return cs;
        }

        public ComputedStyle Acquire()
        {
            inheritedData.Acquire();
            layoutData.Acquire();
            rareData.Acquire();
            visualData.Acquire();
            return this;
        }

        public void Release()
        {
            inheritedData.Release();
            layoutData.Release();
            rareData.Release();
            visualData.Release();
        }

        public void CopyFrom(ref ComputedStyle other)
        {
            inheritedData.CopyFrom(other.inheritedData);
            layoutData.CopyFrom(other.layoutData);
            rareData.CopyFrom(other.rareData);
            visualData.CopyFrom(other.visualData);

            yogaNode = other.yogaNode;
            customProperties = other.customProperties;
            matchingRulesHash = other.matchingRulesHash;
            dpiScaling = other.dpiScaling;
        }

        public void ApplyProperties(StylePropertyReader reader, ref ComputedStyle parentStyle)
        {
            for (var id = reader.propertyId; id != StylePropertyId.Unknown; id = reader.MoveNextProperty())
            {
                if (ApplyGlobalKeyword(reader, ref parentStyle))
                    continue;
                switch (id)
                {
                    case StylePropertyId.AlignContent:
                        layoutData.Write().alignContent = (Align)reader.ReadEnum(StyleEnumType.Align, 0);
                        break;
                    case StylePropertyId.AlignItems:
                        layoutData.Write().alignItems = (Align)reader.ReadEnum(StyleEnumType.Align, 0);
                        break;
                    case StylePropertyId.AlignSelf:
                        layoutData.Write().alignSelf = (Align)reader.ReadEnum(StyleEnumType.Align, 0);
                        break;
                    case StylePropertyId.BackgroundColor:
                        visualData.Write().backgroundColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.BackgroundImage:
                        visualData.Write().backgroundImage = reader.ReadBackground(0);
                        break;
                    case StylePropertyId.BorderBottomColor:
                        visualData.Write().borderBottomColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.BorderBottomLeftRadius:
                        visualData.Write().borderBottomLeftRadius = reader.ReadLength(0);
                        break;
                    case StylePropertyId.BorderBottomRightRadius:
                        visualData.Write().borderBottomRightRadius = reader.ReadLength(0);
                        break;
                    case StylePropertyId.BorderBottomWidth:
                        layoutData.Write().borderBottomWidth = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.BorderColor:
                        ShorthandApplicator.ApplyBorderColor(reader, ref this);
                        break;
                    case StylePropertyId.BorderLeftColor:
                        visualData.Write().borderLeftColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.BorderLeftWidth:
                        layoutData.Write().borderLeftWidth = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.BorderRadius:
                        ShorthandApplicator.ApplyBorderRadius(reader, ref this);
                        break;
                    case StylePropertyId.BorderRightColor:
                        visualData.Write().borderRightColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.BorderRightWidth:
                        layoutData.Write().borderRightWidth = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.BorderTopColor:
                        visualData.Write().borderTopColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.BorderTopLeftRadius:
                        visualData.Write().borderTopLeftRadius = reader.ReadLength(0);
                        break;
                    case StylePropertyId.BorderTopRightRadius:
                        visualData.Write().borderTopRightRadius = reader.ReadLength(0);
                        break;
                    case StylePropertyId.BorderTopWidth:
                        layoutData.Write().borderTopWidth = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.BorderWidth:
                        ShorthandApplicator.ApplyBorderWidth(reader, ref this);
                        break;
                    case StylePropertyId.Bottom:
                        layoutData.Write().bottom = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Color:
                        inheritedData.Write().color = reader.ReadColor(0);
                        break;
                    case StylePropertyId.Cursor:
                        rareData.Write().cursor = reader.ReadCursor(0);
                        break;
                    case StylePropertyId.Display:
                        layoutData.Write().display = (DisplayStyle)reader.ReadEnum(StyleEnumType.DisplayStyle, 0);
                        break;
                    case StylePropertyId.Flex:
                        ShorthandApplicator.ApplyFlex(reader, ref this);
                        break;
                    case StylePropertyId.FlexBasis:
                        layoutData.Write().flexBasis = reader.ReadLength(0);
                        break;
                    case StylePropertyId.FlexDirection:
                        layoutData.Write().flexDirection = (FlexDirection)reader.ReadEnum(StyleEnumType.FlexDirection, 0);
                        break;
                    case StylePropertyId.FlexGrow:
                        layoutData.Write().flexGrow = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.FlexShrink:
                        layoutData.Write().flexShrink = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.FlexWrap:
                        layoutData.Write().flexWrap = (Wrap)reader.ReadEnum(StyleEnumType.Wrap, 0);
                        break;
                    case StylePropertyId.FontSize:
                        inheritedData.Write().fontSize = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Height:
                        layoutData.Write().height = reader.ReadLength(0);
                        break;
                    case StylePropertyId.JustifyContent:
                        layoutData.Write().justifyContent = (Justify)reader.ReadEnum(StyleEnumType.Justify, 0);
                        break;
                    case StylePropertyId.Left:
                        layoutData.Write().left = reader.ReadLength(0);
                        break;
                    case StylePropertyId.LetterSpacing:
                        inheritedData.Write().letterSpacing = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Margin:
                        ShorthandApplicator.ApplyMargin(reader, ref this);
                        break;
                    case StylePropertyId.MarginBottom:
                        layoutData.Write().marginBottom = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MarginLeft:
                        layoutData.Write().marginLeft = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MarginRight:
                        layoutData.Write().marginRight = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MarginTop:
                        layoutData.Write().marginTop = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MaxHeight:
                        layoutData.Write().maxHeight = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MaxWidth:
                        layoutData.Write().maxWidth = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MinHeight:
                        layoutData.Write().minHeight = reader.ReadLength(0);
                        break;
                    case StylePropertyId.MinWidth:
                        layoutData.Write().minWidth = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Opacity:
                        visualData.Write().opacity = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.Overflow:
                        visualData.Write().overflow = (OverflowInternal)reader.ReadEnum(StyleEnumType.OverflowInternal, 0);
                        break;
                    case StylePropertyId.Padding:
                        ShorthandApplicator.ApplyPadding(reader, ref this);
                        break;
                    case StylePropertyId.PaddingBottom:
                        layoutData.Write().paddingBottom = reader.ReadLength(0);
                        break;
                    case StylePropertyId.PaddingLeft:
                        layoutData.Write().paddingLeft = reader.ReadLength(0);
                        break;
                    case StylePropertyId.PaddingRight:
                        layoutData.Write().paddingRight = reader.ReadLength(0);
                        break;
                    case StylePropertyId.PaddingTop:
                        layoutData.Write().paddingTop = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Position:
                        layoutData.Write().position = (Position)reader.ReadEnum(StyleEnumType.Position, 0);
                        break;
                    case StylePropertyId.Right:
                        layoutData.Write().right = reader.ReadLength(0);
                        break;
                    case StylePropertyId.TextOverflow:
                        rareData.Write().textOverflow = (TextOverflow)reader.ReadEnum(StyleEnumType.TextOverflow, 0);
                        break;
                    case StylePropertyId.TextShadow:
                        inheritedData.Write().textShadow = reader.ReadTextShadow(0);
                        break;
                    case StylePropertyId.Top:
                        layoutData.Write().top = reader.ReadLength(0);
                        break;
                    case StylePropertyId.UnityBackgroundImageTintColor:
                        rareData.Write().unityBackgroundImageTintColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.UnityBackgroundScaleMode:
                        rareData.Write().unityBackgroundScaleMode = (ScaleMode)reader.ReadEnum(StyleEnumType.ScaleMode, 0);
                        break;
                    case StylePropertyId.UnityFont:
                        inheritedData.Write().unityFont = reader.ReadFont(0);
                        break;
                    case StylePropertyId.UnityFontDefinition:
                        inheritedData.Write().unityFontDefinition = reader.ReadFontDefinition(0);
                        break;
                    case StylePropertyId.UnityFontStyleAndWeight:
                        inheritedData.Write().unityFontStyleAndWeight = (FontStyle)reader.ReadEnum(StyleEnumType.FontStyle, 0);
                        break;
                    case StylePropertyId.UnityOverflowClipBox:
                        rareData.Write().unityOverflowClipBox = (OverflowClipBox)reader.ReadEnum(StyleEnumType.OverflowClipBox, 0);
                        break;
                    case StylePropertyId.UnityParagraphSpacing:
                        inheritedData.Write().unityParagraphSpacing = reader.ReadLength(0);
                        break;
                    case StylePropertyId.UnitySliceBottom:
                        rareData.Write().unitySliceBottom = reader.ReadInt(0);
                        break;
                    case StylePropertyId.UnitySliceLeft:
                        rareData.Write().unitySliceLeft = reader.ReadInt(0);
                        break;
                    case StylePropertyId.UnitySliceRight:
                        rareData.Write().unitySliceRight = reader.ReadInt(0);
                        break;
                    case StylePropertyId.UnitySliceTop:
                        rareData.Write().unitySliceTop = reader.ReadInt(0);
                        break;
                    case StylePropertyId.UnityTextAlign:
                        inheritedData.Write().unityTextAlign = (TextAnchor)reader.ReadEnum(StyleEnumType.TextAnchor, 0);
                        break;
                    case StylePropertyId.UnityTextOutline:
                        ShorthandApplicator.ApplyUnityTextOutline(reader, ref this);
                        break;
                    case StylePropertyId.UnityTextOutlineColor:
                        inheritedData.Write().unityTextOutlineColor = reader.ReadColor(0);
                        break;
                    case StylePropertyId.UnityTextOutlineWidth:
                        inheritedData.Write().unityTextOutlineWidth = reader.ReadFloat(0);
                        break;
                    case StylePropertyId.UnityTextOverflowPosition:
                        rareData.Write().unityTextOverflowPosition = (TextOverflowPosition)reader.ReadEnum(StyleEnumType.TextOverflowPosition, 0);
                        break;
                    case StylePropertyId.Visibility:
                        inheritedData.Write().visibility = (Visibility)reader.ReadEnum(StyleEnumType.Visibility, 0);
                        break;
                    case StylePropertyId.WhiteSpace:
                        inheritedData.Write().whiteSpace = (WhiteSpace)reader.ReadEnum(StyleEnumType.WhiteSpace, 0);
                        break;
                    case StylePropertyId.Width:
                        layoutData.Write().width = reader.ReadLength(0);
                        break;
                    case StylePropertyId.WordSpacing:
                        inheritedData.Write().wordSpacing = reader.ReadLength(0);
                        break;
                    case StylePropertyId.Custom:
                        ApplyCustomStyleProperty(reader);
                        break;
                    default:
                        Debug.LogAssertion($"Unknown property id {id}");
                        break;
                }
            }
        }

        public void ApplyStyleValue(StyleValue sv, ref ComputedStyle parentStyle)
        {
            if (ApplyGlobalKeyword(sv, ref parentStyle))
                return;
            switch (sv.id)
            {
                case StylePropertyId.AlignContent:
                    layoutData.Write().alignContent = (Align)sv.number;
                    if (sv.keyword == StyleKeyword.Auto)
                        layoutData.Write().alignContent = Align.Auto;
                    break;
                case StylePropertyId.AlignItems:
                    layoutData.Write().alignItems = (Align)sv.number;
                    if (sv.keyword == StyleKeyword.Auto)
                        layoutData.Write().alignItems = Align.Auto;
                    break;
                case StylePropertyId.AlignSelf:
                    layoutData.Write().alignSelf = (Align)sv.number;
                    if (sv.keyword == StyleKeyword.Auto)
                        layoutData.Write().alignSelf = Align.Auto;
                    break;
                case StylePropertyId.BackgroundColor:
                    visualData.Write().backgroundColor = sv.color;
                    break;
                case StylePropertyId.BackgroundImage:
                    visualData.Write().backgroundImage = sv.resource.IsAllocated ? Background.FromObject(sv.resource.Target) : new Background();
                    break;
                case StylePropertyId.BorderBottomColor:
                    visualData.Write().borderBottomColor = sv.color;
                    break;
                case StylePropertyId.BorderBottomLeftRadius:
                    visualData.Write().borderBottomLeftRadius = sv.length;
                    break;
                case StylePropertyId.BorderBottomRightRadius:
                    visualData.Write().borderBottomRightRadius = sv.length;
                    break;
                case StylePropertyId.BorderBottomWidth:
                    layoutData.Write().borderBottomWidth = sv.number;
                    break;
                case StylePropertyId.BorderLeftColor:
                    visualData.Write().borderLeftColor = sv.color;
                    break;
                case StylePropertyId.BorderLeftWidth:
                    layoutData.Write().borderLeftWidth = sv.number;
                    break;
                case StylePropertyId.BorderRightColor:
                    visualData.Write().borderRightColor = sv.color;
                    break;
                case StylePropertyId.BorderRightWidth:
                    layoutData.Write().borderRightWidth = sv.number;
                    break;
                case StylePropertyId.BorderTopColor:
                    visualData.Write().borderTopColor = sv.color;
                    break;
                case StylePropertyId.BorderTopLeftRadius:
                    visualData.Write().borderTopLeftRadius = sv.length;
                    break;
                case StylePropertyId.BorderTopRightRadius:
                    visualData.Write().borderTopRightRadius = sv.length;
                    break;
                case StylePropertyId.BorderTopWidth:
                    layoutData.Write().borderTopWidth = sv.number;
                    break;
                case StylePropertyId.Bottom:
                    layoutData.Write().bottom = sv.length;
                    break;
                case StylePropertyId.Color:
                    inheritedData.Write().color = sv.color;
                    break;
                case StylePropertyId.Display:
                    layoutData.Write().display = (DisplayStyle)sv.number;
                    if (sv.keyword == StyleKeyword.None)
                        layoutData.Write().display = DisplayStyle.None;
                    break;
                case StylePropertyId.FlexBasis:
                    layoutData.Write().flexBasis = sv.length;
                    break;
                case StylePropertyId.FlexDirection:
                    layoutData.Write().flexDirection = (FlexDirection)sv.number;
                    break;
                case StylePropertyId.FlexGrow:
                    layoutData.Write().flexGrow = sv.number;
                    break;
                case StylePropertyId.FlexShrink:
                    layoutData.Write().flexShrink = sv.number;
                    break;
                case StylePropertyId.FlexWrap:
                    layoutData.Write().flexWrap = (Wrap)sv.number;
                    break;
                case StylePropertyId.FontSize:
                    inheritedData.Write().fontSize = sv.length;
                    break;
                case StylePropertyId.Height:
                    layoutData.Write().height = sv.length;
                    break;
                case StylePropertyId.JustifyContent:
                    layoutData.Write().justifyContent = (Justify)sv.number;
                    break;
                case StylePropertyId.Left:
                    layoutData.Write().left = sv.length;
                    break;
                case StylePropertyId.LetterSpacing:
                    inheritedData.Write().letterSpacing = sv.length;
                    break;
                case StylePropertyId.MarginBottom:
                    layoutData.Write().marginBottom = sv.length;
                    break;
                case StylePropertyId.MarginLeft:
                    layoutData.Write().marginLeft = sv.length;
                    break;
                case StylePropertyId.MarginRight:
                    layoutData.Write().marginRight = sv.length;
                    break;
                case StylePropertyId.MarginTop:
                    layoutData.Write().marginTop = sv.length;
                    break;
                case StylePropertyId.MaxHeight:
                    layoutData.Write().maxHeight = sv.length;
                    break;
                case StylePropertyId.MaxWidth:
                    layoutData.Write().maxWidth = sv.length;
                    break;
                case StylePropertyId.MinHeight:
                    layoutData.Write().minHeight = sv.length;
                    break;
                case StylePropertyId.MinWidth:
                    layoutData.Write().minWidth = sv.length;
                    break;
                case StylePropertyId.Opacity:
                    visualData.Write().opacity = sv.number;
                    break;
                case StylePropertyId.Overflow:
                    visualData.Write().overflow = (OverflowInternal)sv.number;
                    break;
                case StylePropertyId.PaddingBottom:
                    layoutData.Write().paddingBottom = sv.length;
                    break;
                case StylePropertyId.PaddingLeft:
                    layoutData.Write().paddingLeft = sv.length;
                    break;
                case StylePropertyId.PaddingRight:
                    layoutData.Write().paddingRight = sv.length;
                    break;
                case StylePropertyId.PaddingTop:
                    layoutData.Write().paddingTop = sv.length;
                    break;
                case StylePropertyId.Position:
                    layoutData.Write().position = (Position)sv.number;
                    break;
                case StylePropertyId.Right:
                    layoutData.Write().right = sv.length;
                    break;
                case StylePropertyId.TextOverflow:
                    rareData.Write().textOverflow = (TextOverflow)sv.number;
                    break;
                case StylePropertyId.Top:
                    layoutData.Write().top = sv.length;
                    break;
                case StylePropertyId.UnityBackgroundImageTintColor:
                    rareData.Write().unityBackgroundImageTintColor = sv.color;
                    break;
                case StylePropertyId.UnityBackgroundScaleMode:
                    rareData.Write().unityBackgroundScaleMode = (ScaleMode)sv.number;
                    break;
                case StylePropertyId.UnityFont:
                    inheritedData.Write().unityFont = sv.resource.IsAllocated ? sv.resource.Target as Font : null;
                    break;
                case StylePropertyId.UnityFontDefinition:
                    inheritedData.Write().unityFontDefinition = sv.resource.IsAllocated ? FontDefinition.FromObject(sv.resource.Target) : new FontDefinition();
                    break;
                case StylePropertyId.UnityFontStyleAndWeight:
                    inheritedData.Write().unityFontStyleAndWeight = (FontStyle)sv.number;
                    break;
                case StylePropertyId.UnityOverflowClipBox:
                    rareData.Write().unityOverflowClipBox = (OverflowClipBox)sv.number;
                    break;
                case StylePropertyId.UnityParagraphSpacing:
                    inheritedData.Write().unityParagraphSpacing = sv.length;
                    break;
                case StylePropertyId.UnitySliceBottom:
                    rareData.Write().unitySliceBottom = (int)sv.number;
                    break;
                case StylePropertyId.UnitySliceLeft:
                    rareData.Write().unitySliceLeft = (int)sv.number;
                    break;
                case StylePropertyId.UnitySliceRight:
                    rareData.Write().unitySliceRight = (int)sv.number;
                    break;
                case StylePropertyId.UnitySliceTop:
                    rareData.Write().unitySliceTop = (int)sv.number;
                    break;
                case StylePropertyId.UnityTextAlign:
                    inheritedData.Write().unityTextAlign = (TextAnchor)sv.number;
                    break;
                case StylePropertyId.UnityTextOutlineColor:
                    inheritedData.Write().unityTextOutlineColor = sv.color;
                    break;
                case StylePropertyId.UnityTextOutlineWidth:
                    inheritedData.Write().unityTextOutlineWidth = sv.number;
                    break;
                case StylePropertyId.UnityTextOverflowPosition:
                    rareData.Write().unityTextOverflowPosition = (TextOverflowPosition)sv.number;
                    break;
                case StylePropertyId.Visibility:
                    inheritedData.Write().visibility = (Visibility)sv.number;
                    break;
                case StylePropertyId.WhiteSpace:
                    inheritedData.Write().whiteSpace = (WhiteSpace)sv.number;
                    break;
                case StylePropertyId.Width:
                    layoutData.Write().width = sv.length;
                    break;
                case StylePropertyId.WordSpacing:
                    inheritedData.Write().wordSpacing = sv.length;
                    break;
                default:
                    Debug.LogAssertion($"Unexpected property id {sv.id}");
                    break;
            }
        }

        public void ApplyStyleCursor(Cursor cursor)
        {
            rareData.Write().cursor = cursor;
        }

        public void ApplyStyleTextShadow(TextShadow st)
        {
            inheritedData.Write().textShadow = st;
        }

        public void ApplyInitialValue(StylePropertyReader reader)
        {
            switch (reader.propertyId)
            {
                case StylePropertyId.Custom:
                    RemoveCustomStyleProperty(reader);
                    break;
                default:
                    ApplyInitialValue(reader.propertyId);
                    break;
            }
        }

        public void ApplyInitialValue(StylePropertyId id)
        {
            switch (id)
            {
                case StylePropertyId.AlignContent:
                    layoutData.Write().alignContent = InitialStyle.alignContent;
                    break;
                case StylePropertyId.AlignItems:
                    layoutData.Write().alignItems = InitialStyle.alignItems;
                    break;
                case StylePropertyId.AlignSelf:
                    layoutData.Write().alignSelf = InitialStyle.alignSelf;
                    break;
                case StylePropertyId.BackgroundColor:
                    visualData.Write().backgroundColor = InitialStyle.backgroundColor;
                    break;
                case StylePropertyId.BackgroundImage:
                    visualData.Write().backgroundImage = InitialStyle.backgroundImage;
                    break;
                case StylePropertyId.BorderBottomColor:
                    visualData.Write().borderBottomColor = InitialStyle.borderBottomColor;
                    break;
                case StylePropertyId.BorderBottomLeftRadius:
                    visualData.Write().borderBottomLeftRadius = InitialStyle.borderBottomLeftRadius;
                    break;
                case StylePropertyId.BorderBottomRightRadius:
                    visualData.Write().borderBottomRightRadius = InitialStyle.borderBottomRightRadius;
                    break;
                case StylePropertyId.BorderBottomWidth:
                    layoutData.Write().borderBottomWidth = InitialStyle.borderBottomWidth;
                    break;
                case StylePropertyId.BorderColor:
                    visualData.Write().borderTopColor = InitialStyle.borderTopColor;
                    visualData.Write().borderRightColor = InitialStyle.borderRightColor;
                    visualData.Write().borderBottomColor = InitialStyle.borderBottomColor;
                    visualData.Write().borderLeftColor = InitialStyle.borderLeftColor;
                    break;
                case StylePropertyId.BorderLeftColor:
                    visualData.Write().borderLeftColor = InitialStyle.borderLeftColor;
                    break;
                case StylePropertyId.BorderLeftWidth:
                    layoutData.Write().borderLeftWidth = InitialStyle.borderLeftWidth;
                    break;
                case StylePropertyId.BorderRadius:
                    visualData.Write().borderTopLeftRadius = InitialStyle.borderTopLeftRadius;
                    visualData.Write().borderTopRightRadius = InitialStyle.borderTopRightRadius;
                    visualData.Write().borderBottomRightRadius = InitialStyle.borderBottomRightRadius;
                    visualData.Write().borderBottomLeftRadius = InitialStyle.borderBottomLeftRadius;
                    break;
                case StylePropertyId.BorderRightColor:
                    visualData.Write().borderRightColor = InitialStyle.borderRightColor;
                    break;
                case StylePropertyId.BorderRightWidth:
                    layoutData.Write().borderRightWidth = InitialStyle.borderRightWidth;
                    break;
                case StylePropertyId.BorderTopColor:
                    visualData.Write().borderTopColor = InitialStyle.borderTopColor;
                    break;
                case StylePropertyId.BorderTopLeftRadius:
                    visualData.Write().borderTopLeftRadius = InitialStyle.borderTopLeftRadius;
                    break;
                case StylePropertyId.BorderTopRightRadius:
                    visualData.Write().borderTopRightRadius = InitialStyle.borderTopRightRadius;
                    break;
                case StylePropertyId.BorderTopWidth:
                    layoutData.Write().borderTopWidth = InitialStyle.borderTopWidth;
                    break;
                case StylePropertyId.BorderWidth:
                    layoutData.Write().borderTopWidth = InitialStyle.borderTopWidth;
                    layoutData.Write().borderRightWidth = InitialStyle.borderRightWidth;
                    layoutData.Write().borderBottomWidth = InitialStyle.borderBottomWidth;
                    layoutData.Write().borderLeftWidth = InitialStyle.borderLeftWidth;
                    break;
                case StylePropertyId.Bottom:
                    layoutData.Write().bottom = InitialStyle.bottom;
                    break;
                case StylePropertyId.Color:
                    inheritedData.Write().color = InitialStyle.color;
                    break;
                case StylePropertyId.Cursor:
                    rareData.Write().cursor = InitialStyle.cursor;
                    break;
                case StylePropertyId.Display:
                    layoutData.Write().display = InitialStyle.display;
                    break;
                case StylePropertyId.Flex:
                    layoutData.Write().flexGrow = InitialStyle.flexGrow;
                    layoutData.Write().flexShrink = InitialStyle.flexShrink;
                    layoutData.Write().flexBasis = InitialStyle.flexBasis;
                    break;
                case StylePropertyId.FlexBasis:
                    layoutData.Write().flexBasis = InitialStyle.flexBasis;
                    break;
                case StylePropertyId.FlexDirection:
                    layoutData.Write().flexDirection = InitialStyle.flexDirection;
                    break;
                case StylePropertyId.FlexGrow:
                    layoutData.Write().flexGrow = InitialStyle.flexGrow;
                    break;
                case StylePropertyId.FlexShrink:
                    layoutData.Write().flexShrink = InitialStyle.flexShrink;
                    break;
                case StylePropertyId.FlexWrap:
                    layoutData.Write().flexWrap = InitialStyle.flexWrap;
                    break;
                case StylePropertyId.FontSize:
                    inheritedData.Write().fontSize = InitialStyle.fontSize;
                    break;
                case StylePropertyId.Height:
                    layoutData.Write().height = InitialStyle.height;
                    break;
                case StylePropertyId.JustifyContent:
                    layoutData.Write().justifyContent = InitialStyle.justifyContent;
                    break;
                case StylePropertyId.Left:
                    layoutData.Write().left = InitialStyle.left;
                    break;
                case StylePropertyId.LetterSpacing:
                    inheritedData.Write().letterSpacing = InitialStyle.letterSpacing;
                    break;
                case StylePropertyId.Margin:
                    layoutData.Write().marginTop = InitialStyle.marginTop;
                    layoutData.Write().marginRight = InitialStyle.marginRight;
                    layoutData.Write().marginBottom = InitialStyle.marginBottom;
                    layoutData.Write().marginLeft = InitialStyle.marginLeft;
                    break;
                case StylePropertyId.MarginBottom:
                    layoutData.Write().marginBottom = InitialStyle.marginBottom;
                    break;
                case StylePropertyId.MarginLeft:
                    layoutData.Write().marginLeft = InitialStyle.marginLeft;
                    break;
                case StylePropertyId.MarginRight:
                    layoutData.Write().marginRight = InitialStyle.marginRight;
                    break;
                case StylePropertyId.MarginTop:
                    layoutData.Write().marginTop = InitialStyle.marginTop;
                    break;
                case StylePropertyId.MaxHeight:
                    layoutData.Write().maxHeight = InitialStyle.maxHeight;
                    break;
                case StylePropertyId.MaxWidth:
                    layoutData.Write().maxWidth = InitialStyle.maxWidth;
                    break;
                case StylePropertyId.MinHeight:
                    layoutData.Write().minHeight = InitialStyle.minHeight;
                    break;
                case StylePropertyId.MinWidth:
                    layoutData.Write().minWidth = InitialStyle.minWidth;
                    break;
                case StylePropertyId.Opacity:
                    visualData.Write().opacity = InitialStyle.opacity;
                    break;
                case StylePropertyId.Overflow:
                    visualData.Write().overflow = InitialStyle.overflow;
                    break;
                case StylePropertyId.Padding:
                    layoutData.Write().paddingTop = InitialStyle.paddingTop;
                    layoutData.Write().paddingRight = InitialStyle.paddingRight;
                    layoutData.Write().paddingBottom = InitialStyle.paddingBottom;
                    layoutData.Write().paddingLeft = InitialStyle.paddingLeft;
                    break;
                case StylePropertyId.PaddingBottom:
                    layoutData.Write().paddingBottom = InitialStyle.paddingBottom;
                    break;
                case StylePropertyId.PaddingLeft:
                    layoutData.Write().paddingLeft = InitialStyle.paddingLeft;
                    break;
                case StylePropertyId.PaddingRight:
                    layoutData.Write().paddingRight = InitialStyle.paddingRight;
                    break;
                case StylePropertyId.PaddingTop:
                    layoutData.Write().paddingTop = InitialStyle.paddingTop;
                    break;
                case StylePropertyId.Position:
                    layoutData.Write().position = InitialStyle.position;
                    break;
                case StylePropertyId.Right:
                    layoutData.Write().right = InitialStyle.right;
                    break;
                case StylePropertyId.TextOverflow:
                    rareData.Write().textOverflow = InitialStyle.textOverflow;
                    break;
                case StylePropertyId.TextShadow:
                    inheritedData.Write().textShadow = InitialStyle.textShadow;
                    break;
                case StylePropertyId.Top:
                    layoutData.Write().top = InitialStyle.top;
                    break;
                case StylePropertyId.UnityBackgroundImageTintColor:
                    rareData.Write().unityBackgroundImageTintColor = InitialStyle.unityBackgroundImageTintColor;
                    break;
                case StylePropertyId.UnityBackgroundScaleMode:
                    rareData.Write().unityBackgroundScaleMode = InitialStyle.unityBackgroundScaleMode;
                    break;
                case StylePropertyId.UnityFont:
                    inheritedData.Write().unityFont = InitialStyle.unityFont;
                    break;
                case StylePropertyId.UnityFontDefinition:
                    inheritedData.Write().unityFontDefinition = InitialStyle.unityFontDefinition;
                    break;
                case StylePropertyId.UnityFontStyleAndWeight:
                    inheritedData.Write().unityFontStyleAndWeight = InitialStyle.unityFontStyleAndWeight;
                    break;
                case StylePropertyId.UnityOverflowClipBox:
                    rareData.Write().unityOverflowClipBox = InitialStyle.unityOverflowClipBox;
                    break;
                case StylePropertyId.UnityParagraphSpacing:
                    inheritedData.Write().unityParagraphSpacing = InitialStyle.unityParagraphSpacing;
                    break;
                case StylePropertyId.UnitySliceBottom:
                    rareData.Write().unitySliceBottom = InitialStyle.unitySliceBottom;
                    break;
                case StylePropertyId.UnitySliceLeft:
                    rareData.Write().unitySliceLeft = InitialStyle.unitySliceLeft;
                    break;
                case StylePropertyId.UnitySliceRight:
                    rareData.Write().unitySliceRight = InitialStyle.unitySliceRight;
                    break;
                case StylePropertyId.UnitySliceTop:
                    rareData.Write().unitySliceTop = InitialStyle.unitySliceTop;
                    break;
                case StylePropertyId.UnityTextAlign:
                    inheritedData.Write().unityTextAlign = InitialStyle.unityTextAlign;
                    break;
                case StylePropertyId.UnityTextOutline:
                    inheritedData.Write().unityTextOutlineColor = InitialStyle.unityTextOutlineColor;
                    inheritedData.Write().unityTextOutlineWidth = InitialStyle.unityTextOutlineWidth;
                    break;
                case StylePropertyId.UnityTextOutlineColor:
                    inheritedData.Write().unityTextOutlineColor = InitialStyle.unityTextOutlineColor;
                    break;
                case StylePropertyId.UnityTextOutlineWidth:
                    inheritedData.Write().unityTextOutlineWidth = InitialStyle.unityTextOutlineWidth;
                    break;
                case StylePropertyId.UnityTextOverflowPosition:
                    rareData.Write().unityTextOverflowPosition = InitialStyle.unityTextOverflowPosition;
                    break;
                case StylePropertyId.Visibility:
                    inheritedData.Write().visibility = InitialStyle.visibility;
                    break;
                case StylePropertyId.WhiteSpace:
                    inheritedData.Write().whiteSpace = InitialStyle.whiteSpace;
                    break;
                case StylePropertyId.Width:
                    layoutData.Write().width = InitialStyle.width;
                    break;
                case StylePropertyId.WordSpacing:
                    inheritedData.Write().wordSpacing = InitialStyle.wordSpacing;
                    break;
                default:
                    Debug.LogAssertion($"Unexpected property id {id}");
                    break;
            }
        }

        public void ApplyUnsetValue(StylePropertyReader reader, ref ComputedStyle parentStyle)
        {
            switch (reader.propertyId)
            {
                case StylePropertyId.Custom:
                    RemoveCustomStyleProperty(reader);
                    break;
                default:
                    ApplyUnsetValue(reader.propertyId, ref parentStyle);
                    break;
            }
        }

        public void ApplyUnsetValue(StylePropertyId id, ref ComputedStyle parentStyle)
        {
            switch (id)
            {
                case StylePropertyId.Color:
                    inheritedData.Write().color = parentStyle.color;
                    break;
                case StylePropertyId.FontSize:
                    inheritedData.Write().fontSize = parentStyle.fontSize;
                    break;
                case StylePropertyId.LetterSpacing:
                    inheritedData.Write().letterSpacing = parentStyle.letterSpacing;
                    break;
                case StylePropertyId.TextShadow:
                    inheritedData.Write().textShadow = parentStyle.textShadow;
                    break;
                case StylePropertyId.UnityFont:
                    inheritedData.Write().unityFont = parentStyle.unityFont;
                    break;
                case StylePropertyId.UnityFontDefinition:
                    inheritedData.Write().unityFontDefinition = parentStyle.unityFontDefinition;
                    break;
                case StylePropertyId.UnityFontStyleAndWeight:
                    inheritedData.Write().unityFontStyleAndWeight = parentStyle.unityFontStyleAndWeight;
                    break;
                case StylePropertyId.UnityParagraphSpacing:
                    inheritedData.Write().unityParagraphSpacing = parentStyle.unityParagraphSpacing;
                    break;
                case StylePropertyId.UnityTextAlign:
                    inheritedData.Write().unityTextAlign = parentStyle.unityTextAlign;
                    break;
                case StylePropertyId.UnityTextOutlineColor:
                    inheritedData.Write().unityTextOutlineColor = parentStyle.unityTextOutlineColor;
                    break;
                case StylePropertyId.UnityTextOutlineWidth:
                    inheritedData.Write().unityTextOutlineWidth = parentStyle.unityTextOutlineWidth;
                    break;
                case StylePropertyId.Visibility:
                    inheritedData.Write().visibility = parentStyle.visibility;
                    break;
                case StylePropertyId.WhiteSpace:
                    inheritedData.Write().whiteSpace = parentStyle.whiteSpace;
                    break;
                case StylePropertyId.WordSpacing:
                    inheritedData.Write().wordSpacing = parentStyle.wordSpacing;
                    break;
                default:
                    ApplyInitialValue(id);
                    break;
            }
        }
    }
}
