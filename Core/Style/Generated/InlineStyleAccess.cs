/******************************************************************************/
//
//                             DO NOT MODIFY
//          This file has been generated by the UIElementsGenerator tool
//              See InlineStyleAccessCsGenerator class for details
//
/******************************************************************************/
using UnityEngine.UIElements.StyleSheets;
using UnityEngine.Yoga;

namespace UnityEngine.UIElements
{
    internal partial class InlineStyleAccess : IStyle
    {
        StyleEnum<Align> IStyle.alignContent
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.AlignContent);
                return new StyleEnum<Align>((Align)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.AlignContent, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.AlignContent = (YogaAlign)ve.computedStyle.alignContent;
                }
            }
        }

        StyleEnum<Align> IStyle.alignItems
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.AlignItems);
                return new StyleEnum<Align>((Align)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.AlignItems, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.AlignItems = (YogaAlign)ve.computedStyle.alignItems;
                }
            }
        }

        StyleEnum<Align> IStyle.alignSelf
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.AlignSelf);
                return new StyleEnum<Align>((Align)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.AlignSelf, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.AlignSelf = (YogaAlign)ve.computedStyle.alignSelf;
                }
            }
        }

        StyleColor IStyle.backgroundColor
        {
            get
            {
                return GetStyleColor(StylePropertyId.BackgroundColor);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BackgroundColor, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleBackground IStyle.backgroundImage
        {
            get
            {
                return GetStyleBackground(StylePropertyId.BackgroundImage);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BackgroundImage, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleColor IStyle.borderBottomColor
        {
            get
            {
                return GetStyleColor(StylePropertyId.BorderBottomColor);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderBottomColor, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleLength IStyle.borderBottomLeftRadius
        {
            get
            {
                return GetStyleLength(StylePropertyId.BorderBottomLeftRadius);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.BorderRadius | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderBottomLeftRadius, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleLength IStyle.borderBottomRightRadius
        {
            get
            {
                return GetStyleLength(StylePropertyId.BorderBottomRightRadius);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.BorderRadius | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderBottomRightRadius, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleFloat IStyle.borderBottomWidth
        {
            get
            {
                return GetStyleFloat(StylePropertyId.BorderBottomWidth);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.BorderWidth | VersionChangeType.Layout | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderBottomWidth, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.BorderBottomWidth = ve.computedStyle.borderBottomWidth;
                }
            }
        }

        StyleColor IStyle.borderLeftColor
        {
            get
            {
                return GetStyleColor(StylePropertyId.BorderLeftColor);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderLeftColor, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleFloat IStyle.borderLeftWidth
        {
            get
            {
                return GetStyleFloat(StylePropertyId.BorderLeftWidth);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.BorderWidth | VersionChangeType.Layout | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderLeftWidth, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.BorderLeftWidth = ve.computedStyle.borderLeftWidth;
                }
            }
        }

        StyleColor IStyle.borderRightColor
        {
            get
            {
                return GetStyleColor(StylePropertyId.BorderRightColor);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderRightColor, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleFloat IStyle.borderRightWidth
        {
            get
            {
                return GetStyleFloat(StylePropertyId.BorderRightWidth);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.BorderWidth | VersionChangeType.Layout | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderRightWidth, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.BorderRightWidth = ve.computedStyle.borderRightWidth;
                }
            }
        }

        StyleColor IStyle.borderTopColor
        {
            get
            {
                return GetStyleColor(StylePropertyId.BorderTopColor);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderTopColor, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleLength IStyle.borderTopLeftRadius
        {
            get
            {
                return GetStyleLength(StylePropertyId.BorderTopLeftRadius);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.BorderRadius | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderTopLeftRadius, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleLength IStyle.borderTopRightRadius
        {
            get
            {
                return GetStyleLength(StylePropertyId.BorderTopRightRadius);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.BorderRadius | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderTopRightRadius, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleFloat IStyle.borderTopWidth
        {
            get
            {
                return GetStyleFloat(StylePropertyId.BorderTopWidth);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.BorderWidth | VersionChangeType.Layout | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.BorderTopWidth, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.BorderTopWidth = ve.computedStyle.borderTopWidth;
                }
            }
        }

        StyleLength IStyle.bottom
        {
            get
            {
                return GetStyleLength(StylePropertyId.Bottom);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.Bottom, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.Bottom = ve.computedStyle.bottom.ToYogaValue();
                }
            }
        }

        StyleColor IStyle.color
        {
            get
            {
                return GetStyleColor(StylePropertyId.Color);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.Color, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleEnum<DisplayStyle> IStyle.display
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.Display);
                return new StyleEnum<DisplayStyle>((DisplayStyle)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.Display, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.Display = (YogaDisplay)ve.computedStyle.display;
                }
            }
        }

        StyleLength IStyle.flexBasis
        {
            get
            {
                return GetStyleLength(StylePropertyId.FlexBasis);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.FlexBasis, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.FlexBasis = ve.computedStyle.flexBasis.ToYogaValue();
                }
            }
        }

        StyleEnum<FlexDirection> IStyle.flexDirection
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.FlexDirection);
                return new StyleEnum<FlexDirection>((FlexDirection)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.FlexDirection, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.FlexDirection = (YogaFlexDirection)ve.computedStyle.flexDirection;
                }
            }
        }

        StyleFloat IStyle.flexGrow
        {
            get
            {
                return GetStyleFloat(StylePropertyId.FlexGrow);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.FlexGrow, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.FlexGrow = ve.computedStyle.flexGrow;
                }
            }
        }

        StyleFloat IStyle.flexShrink
        {
            get
            {
                return GetStyleFloat(StylePropertyId.FlexShrink);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.FlexShrink, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.FlexShrink = ve.computedStyle.flexShrink;
                }
            }
        }

        StyleEnum<Wrap> IStyle.flexWrap
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.FlexWrap);
                return new StyleEnum<Wrap>((Wrap)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.FlexWrap, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.Wrap = (YogaWrap)ve.computedStyle.flexWrap;
                }
            }
        }

        StyleLength IStyle.fontSize
        {
            get
            {
                return GetStyleLength(StylePropertyId.FontSize);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.FontSize, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleLength IStyle.height
        {
            get
            {
                return GetStyleLength(StylePropertyId.Height);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.Height, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.Height = ve.computedStyle.height.ToYogaValue();
                }
            }
        }

        StyleEnum<Justify> IStyle.justifyContent
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.JustifyContent);
                return new StyleEnum<Justify>((Justify)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.JustifyContent, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.JustifyContent = (YogaJustify)ve.computedStyle.justifyContent;
                }
            }
        }

        StyleLength IStyle.left
        {
            get
            {
                return GetStyleLength(StylePropertyId.Left);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.Left, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.Left = ve.computedStyle.left.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.letterSpacing
        {
            get
            {
                return GetStyleLength(StylePropertyId.LetterSpacing);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Repaint | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.LetterSpacing, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleLength IStyle.marginBottom
        {
            get
            {
                return GetStyleLength(StylePropertyId.MarginBottom);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.MarginBottom, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.MarginBottom = ve.computedStyle.marginBottom.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.marginLeft
        {
            get
            {
                return GetStyleLength(StylePropertyId.MarginLeft);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.MarginLeft, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.MarginLeft = ve.computedStyle.marginLeft.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.marginRight
        {
            get
            {
                return GetStyleLength(StylePropertyId.MarginRight);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.MarginRight, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.MarginRight = ve.computedStyle.marginRight.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.marginTop
        {
            get
            {
                return GetStyleLength(StylePropertyId.MarginTop);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.MarginTop, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.MarginTop = ve.computedStyle.marginTop.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.maxHeight
        {
            get
            {
                return GetStyleLength(StylePropertyId.MaxHeight);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.MaxHeight, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.MaxHeight = ve.computedStyle.maxHeight.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.maxWidth
        {
            get
            {
                return GetStyleLength(StylePropertyId.MaxWidth);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.MaxWidth, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.MaxWidth = ve.computedStyle.maxWidth.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.minHeight
        {
            get
            {
                return GetStyleLength(StylePropertyId.MinHeight);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.MinHeight, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.MinHeight = ve.computedStyle.minHeight.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.minWidth
        {
            get
            {
                return GetStyleLength(StylePropertyId.MinWidth);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.MinWidth, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.MinWidth = ve.computedStyle.minWidth.ToYogaValue();
                }
            }
        }

        StyleFloat IStyle.opacity
        {
            get
            {
                return GetStyleFloat(StylePropertyId.Opacity);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Opacity;
                if (SetStyleValue(StylePropertyId.Opacity, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleEnum<Overflow> IStyle.overflow
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.Overflow);
                return new StyleEnum<Overflow>((Overflow)tmp.value, tmp.keyword);
            }

            set
            {
                var tmp = new StyleEnum<OverflowInternal>((OverflowInternal)value.value, value.keyword);
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout | VersionChangeType.Overflow;
                if (SetStyleValue(StylePropertyId.Overflow, tmp, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.Overflow = (YogaOverflow)ve.computedStyle.overflow;
                }
            }
        }

        StyleLength IStyle.paddingBottom
        {
            get
            {
                return GetStyleLength(StylePropertyId.PaddingBottom);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.PaddingBottom, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.PaddingBottom = ve.computedStyle.paddingBottom.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.paddingLeft
        {
            get
            {
                return GetStyleLength(StylePropertyId.PaddingLeft);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.PaddingLeft, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.PaddingLeft = ve.computedStyle.paddingLeft.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.paddingRight
        {
            get
            {
                return GetStyleLength(StylePropertyId.PaddingRight);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.PaddingRight, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.PaddingRight = ve.computedStyle.paddingRight.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.paddingTop
        {
            get
            {
                return GetStyleLength(StylePropertyId.PaddingTop);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.PaddingTop, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.PaddingTop = ve.computedStyle.paddingTop.ToYogaValue();
                }
            }
        }

        StyleEnum<Position> IStyle.position
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.Position);
                return new StyleEnum<Position>((Position)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.Position, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.PositionType = (YogaPositionType)ve.computedStyle.position;
                }
            }
        }

        StyleLength IStyle.right
        {
            get
            {
                return GetStyleLength(StylePropertyId.Right);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.Right, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.Right = ve.computedStyle.right.ToYogaValue();
                }
            }
        }

        StyleEnum<TextOverflow> IStyle.textOverflow
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.TextOverflow);
                return new StyleEnum<TextOverflow>((TextOverflow)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.TextOverflow, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleLength IStyle.top
        {
            get
            {
                return GetStyleLength(StylePropertyId.Top);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.Top, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.Top = ve.computedStyle.top.ToYogaValue();
                }
            }
        }

        StyleColor IStyle.unityBackgroundImageTintColor
        {
            get
            {
                return GetStyleColor(StylePropertyId.UnityBackgroundImageTintColor);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnityBackgroundImageTintColor, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleEnum<ScaleMode> IStyle.unityBackgroundScaleMode
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.UnityBackgroundScaleMode);
                return new StyleEnum<ScaleMode>((ScaleMode)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnityBackgroundScaleMode, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleFont IStyle.unityFont
        {
            get
            {
                return GetStyleFont(StylePropertyId.UnityFont);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Layout | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnityFont, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleFontDefinition IStyle.unityFontDefinition
        {
            get
            {
                return GetStyleFontDefinition(StylePropertyId.UnityFontDefinition);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Repaint | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.UnityFontDefinition, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleEnum<FontStyle> IStyle.unityFontStyleAndWeight
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.UnityFontStyleAndWeight);
                return new StyleEnum<FontStyle>((FontStyle)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Layout | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnityFontStyleAndWeight, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleEnum<OverflowClipBox> IStyle.unityOverflowClipBox
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.UnityOverflowClipBox);
                return new StyleEnum<OverflowClipBox>((OverflowClipBox)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnityOverflowClipBox, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleLength IStyle.unityParagraphSpacing
        {
            get
            {
                return GetStyleLength(StylePropertyId.UnityParagraphSpacing);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Repaint | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.UnityParagraphSpacing, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleInt IStyle.unitySliceBottom
        {
            get
            {
                return GetStyleInt(StylePropertyId.UnitySliceBottom);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnitySliceBottom, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleInt IStyle.unitySliceLeft
        {
            get
            {
                return GetStyleInt(StylePropertyId.UnitySliceLeft);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnitySliceLeft, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleInt IStyle.unitySliceRight
        {
            get
            {
                return GetStyleInt(StylePropertyId.UnitySliceRight);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnitySliceRight, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleInt IStyle.unitySliceTop
        {
            get
            {
                return GetStyleInt(StylePropertyId.UnitySliceTop);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnitySliceTop, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleEnum<TextAnchor> IStyle.unityTextAlign
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.UnityTextAlign);
                return new StyleEnum<TextAnchor>((TextAnchor)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnityTextAlign, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleColor IStyle.unityTextOutlineColor
        {
            get
            {
                return GetStyleColor(StylePropertyId.UnityTextOutlineColor);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnityTextOutlineColor, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleFloat IStyle.unityTextOutlineWidth
        {
            get
            {
                return GetStyleFloat(StylePropertyId.UnityTextOutlineWidth);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Layout | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnityTextOutlineWidth, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleEnum<TextOverflowPosition> IStyle.unityTextOverflowPosition
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.UnityTextOverflowPosition);
                return new StyleEnum<TextOverflowPosition>((TextOverflowPosition)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.UnityTextOverflowPosition, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleEnum<Visibility> IStyle.visibility
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.Visibility);
                return new StyleEnum<Visibility>((Visibility)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Repaint;
                if (SetStyleValue(StylePropertyId.Visibility, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleEnum<WhiteSpace> IStyle.whiteSpace
        {
            get
            {
                var tmp = GetStyleInt(StylePropertyId.WhiteSpace);
                return new StyleEnum<WhiteSpace>((WhiteSpace)tmp.value, tmp.keyword);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.WhiteSpace, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }

        StyleLength IStyle.width
        {
            get
            {
                return GetStyleLength(StylePropertyId.Width);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.Width, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                    ve.yogaNode.Width = ve.computedStyle.width.ToYogaValue();
                }
            }
        }

        StyleLength IStyle.wordSpacing
        {
            get
            {
                return GetStyleLength(StylePropertyId.WordSpacing);
            }

            set
            {
                var changeType = VersionChangeType.Styles | VersionChangeType.StyleSheet | VersionChangeType.Repaint | VersionChangeType.Layout;
                if (SetStyleValue(StylePropertyId.WordSpacing, value, ref changeType))
                {
                    ve.IncrementVersion(changeType);
                }
            }
        }
    }
}
