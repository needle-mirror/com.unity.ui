// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace UnityEngine.UIElements
{
    public enum Align
    {
        public const UnityEngine.UIElements.Align Auto = 0;
        public const UnityEngine.UIElements.Align Center = 2;
        public const UnityEngine.UIElements.Align FlexEnd = 3;
        public const UnityEngine.UIElements.Align FlexStart = 1;
        public const UnityEngine.UIElements.Align Stretch = 4;
        public int value__;
    }

    public enum AlternatingRowBackground
    {
        public const UnityEngine.UIElements.AlternatingRowBackground All = 2;
        public const UnityEngine.UIElements.AlternatingRowBackground ContentOnly = 1;
        public const UnityEngine.UIElements.AlternatingRowBackground None = 0;
        public int value__;
    }

    public class AttachToPanelEvent : UnityEngine.UIElements.PanelChangedEventBase<UnityEngine.UIElements.AttachToPanelEvent>
    {
        public AttachToPanelEvent() {}
    }

    public struct Background : System.IEquatable<UnityEngine.UIElements.Background>
    {
        public UnityEngine.RenderTexture renderTexture { get; set; }
        public UnityEngine.Sprite sprite { get; set; }
        public UnityEngine.Texture2D texture { get; set; }
        public UnityEngine.UIElements.VectorImage vectorImage { get; set; }
        [System.Obsolete(@"Use Background.FromTexture2D instead")] public Background(UnityEngine.Texture2D t) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.Background other);
        public static UnityEngine.UIElements.Background FromRenderTexture(UnityEngine.RenderTexture rt);
        public static UnityEngine.UIElements.Background FromSprite(UnityEngine.Sprite s);
        public static UnityEngine.UIElements.Background FromTexture2D(UnityEngine.Texture2D t);
        public static UnityEngine.UIElements.Background FromVectorImage(UnityEngine.UIElements.VectorImage vi);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.Background lhs, UnityEngine.UIElements.Background rhs);
        public static bool operator !=(UnityEngine.UIElements.Background lhs, UnityEngine.UIElements.Background rhs);
        public virtual string ToString();
    }

    public abstract class BaseField<TValueType> : UnityEngine.UIElements.BindableElement, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged<TValueType>
    {
        public static readonly string inputUssClassName;
        public static readonly string labelDraggerVariantUssClassName;
        public static readonly string labelUssClassName;
        public static readonly string mixedValueLabelUssClassName;
        protected static readonly string mixedValueString;
        public static readonly string noLabelVariantUssClassName;
        public static readonly string ussClassName;
        public string label { get; set; }
        public UnityEngine.UIElements.Label labelElement { get; }
        protected UnityEngine.UIElements.Label mixedValueLabel { get; }
        protected TValueType rawValue { get; set; }
        public virtual bool showMixedValue { get; set; }
        public virtual TValueType value { get; set; }
        protected BaseField(string label, UnityEngine.UIElements.VisualElement visualInput) {}
        public virtual void SetValueWithoutNotify(TValueType newValue);
        protected virtual void UpdateMixedValueContent();
        public class UxmlTraits<TValueType> : UnityEngine.UIElements.BindableElement.UxmlTraits
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class BaseFieldTraits<TValueType, TValueUxmlAttributeType> : UnityEngine.UIElements.BaseField<TValueType> where TValueUxmlAttributeType : UnityEngine.UIElements.TypedUxmlAttributeDescription<TValueType>, new()
    {
        public BaseFieldTraits() {}
        public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
    }

    public abstract class BaseSlider<TValueType> : UnityEngine.UIElements.BaseField<TValueType> where TValueType : System.IComparable<TValueType>
    {
        public static readonly string dragContainerUssClassName;
        public static readonly string draggerBorderUssClassName;
        public static readonly string draggerUssClassName;
        public static readonly string horizontalVariantUssClassName;
        public static readonly string inputUssClassName;
        public static readonly string labelUssClassName;
        public static readonly string textFieldClassName;
        public static readonly string trackerUssClassName;
        public static readonly string ussClassName;
        public static readonly string verticalVariantUssClassName;
        public UnityEngine.UIElements.SliderDirection direction { get; set; }
        public TValueType highValue { get; set; }
        public bool inverted { get; set; }
        public TValueType lowValue { get; set; }
        public virtual float pageSize { get; set; }
        public TValueType range { get; }
        public virtual bool showInputField { get; set; }
        public virtual TValueType value { get; set; }
        public void AdjustDragElement(float factor);
        protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
        protected static float GetClosestPowerOfTen(float positiveNumber);
        protected static float RoundToMultipleOf(float value, float roundingValue);
        public virtual void SetValueWithoutNotify(TValueType newValue);
        protected virtual void UpdateMixedValueContent();
    }

    public class BindableElement : UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.IBindable
    {
        public virtual UnityEngine.UIElements.IBinding binding { get; set; }
        public virtual string bindingPath { get; set; }
        public BindableElement() {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.BindableElement, UnityEngine.UIElements.BindableElement.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class BlurEvent : UnityEngine.UIElements.FocusEventBase<UnityEngine.UIElements.BlurEvent>
    {
        public BlurEvent() {}
        protected virtual void PreDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public class Box : UnityEngine.UIElements.VisualElement
    {
        public static readonly string ussClassName;
        public Box() {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.Box>
        {
            public UxmlFactory() {}
        }
    }

    public class Button : UnityEngine.UIElements.TextElement
    {
        public static readonly string ussClassName;
        public event System.Action clicked;
        [System.Obsolete(@"onClick is obsolete. Use clicked instead (UnityUpgradable) -> clicked", true)] public event System.Action onClick;
        public UnityEngine.UIElements.Clickable clickable { get; set; }
        public Button() {}
        public Button(System.Action clickEvent) {}
        protected virtual UnityEngine.Vector2 DoMeasure(float desiredWidth, UnityEngine.UIElements.VisualElement.MeasureMode widthMode, float desiredHeight, UnityEngine.UIElements.VisualElement.MeasureMode heightMode);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.Button, UnityEngine.UIElements.Button.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.TextElement.UxmlTraits
        {
            public UxmlTraits() {}
        }
    }

    public abstract class CallbackEventHandler : UnityEngine.UIElements.IEventHandler
    {
        protected CallbackEventHandler() {}
        protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
        protected virtual void ExecuteDefaultActionAtTarget(UnityEngine.UIElements.EventBase evt);
        public virtual void HandleEvent(UnityEngine.UIElements.EventBase evt);
        public virtual bool HasBubbleUpHandlers();
        public virtual bool HasTrickleDownHandlers();
        public void RegisterCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, UnityEngine.UIElements.TrickleDown useTrickleDown = 0) where TEventType : UnityEngine.UIElements.EventBase<TEventType>, new();
        public void RegisterCallback<TEventType, TUserArgsType>(UnityEngine.UIElements.EventCallback<TEventType, TUserArgsType> callback, TUserArgsType userArgs, UnityEngine.UIElements.TrickleDown useTrickleDown = 0) where TEventType : UnityEngine.UIElements.EventBase<TEventType>, new();
        public abstract void SendEvent(UnityEngine.UIElements.EventBase e);
        public void UnregisterCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, UnityEngine.UIElements.TrickleDown useTrickleDown = 0) where TEventType : UnityEngine.UIElements.EventBase<TEventType>, new();
        public void UnregisterCallback<TEventType, TUserArgsType>(UnityEngine.UIElements.EventCallback<TEventType, TUserArgsType> callback, UnityEngine.UIElements.TrickleDown useTrickleDown = 0) where TEventType : UnityEngine.UIElements.EventBase<TEventType>, new();
    }

    public class ChangeEvent<T> : UnityEngine.UIElements.EventBase<UnityEngine.UIElements.ChangeEvent<T>>, UnityEngine.UIElements.IChangeEvent
    {
        public T newValue { get; protected set; }
        public T previousValue { get; protected set; }
        public ChangeEvent() {}
        public static UnityEngine.UIElements.ChangeEvent<T> GetPooled(T previousValue, T newValue);
        protected virtual void Init();
    }

    public class Clickable : UnityEngine.UIElements.PointerManipulator
    {
        public event System.Action clicked;
        public event System.Action<UnityEngine.UIElements.EventBase> clickedWithEventInfo;
        protected bool active { get; set; }
        public UnityEngine.Vector2 lastMousePosition { get; }
        public Clickable(System.Action handler) {}
        public Clickable(System.Action<UnityEngine.UIElements.EventBase> handler) {}
        public Clickable(System.Action handler, long delay, long interval) {}
        protected void Invoke(UnityEngine.UIElements.EventBase evt);
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent evt);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent evt);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent evt);
        protected virtual void ProcessDownEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.Vector2 localPosition, int pointerId);
        protected virtual void ProcessMoveEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.Vector2 localPosition);
        protected virtual void ProcessUpEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.Vector2 localPosition, int pointerId);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public sealed class ClickEvent : UnityEngine.UIElements.PointerEventBase<UnityEngine.UIElements.ClickEvent>
    {
        public ClickEvent() {}
    }

    public abstract class CommandEventBase<T> : UnityEngine.UIElements.EventBase<T>, UnityEngine.UIElements.ICommandEvent where T : UnityEngine.UIElements.CommandEventBase<T>, new()
    {
        public virtual string commandName { get; protected set; }
        protected CommandEventBase() {}
        public static T GetPooled(string commandName);
        public static T GetPooled(UnityEngine.Event systemEvent);
        protected virtual void Init();
    }

    public class ContextClickEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.ContextClickEvent>
    {
        public ContextClickEvent() {}
    }

    public enum ContextType
    {
        public const UnityEngine.UIElements.ContextType Editor = 1;
        public const UnityEngine.UIElements.ContextType Player = 0;
        public int value__;
    }

    public abstract class ContextualMenuManager
    {
        protected ContextualMenuManager() {}
        public void DisplayMenu(UnityEngine.UIElements.EventBase triggerEvent, UnityEngine.UIElements.IEventHandler target);
        public abstract void DisplayMenuIfEventMatches(UnityEngine.UIElements.EventBase evt, UnityEngine.UIElements.IEventHandler eventHandler);
        protected abstract void DoDisplayMenu(UnityEngine.UIElements.DropdownMenu menu, UnityEngine.UIElements.EventBase triggerEvent);
    }

    public class ContextualMenuManipulator : UnityEngine.UIElements.MouseManipulator
    {
        public ContextualMenuManipulator(System.Action<UnityEngine.UIElements.ContextualMenuPopulateEvent> menuBuilder) {}
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class ContextualMenuPopulateEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.ContextualMenuPopulateEvent>
    {
        public UnityEngine.UIElements.DropdownMenu menu { get; }
        public UnityEngine.UIElements.EventBase triggerEvent { get; }
        public ContextualMenuPopulateEvent() {}
        public static UnityEngine.UIElements.ContextualMenuPopulateEvent GetPooled(UnityEngine.UIElements.EventBase triggerEvent, UnityEngine.UIElements.DropdownMenu menu, UnityEngine.UIElements.IEventHandler target, UnityEngine.UIElements.ContextualMenuManager menuManager);
        protected virtual void Init();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public struct CreationContext : System.IEquatable<UnityEngine.UIElements.CreationContext>
    {
        public static readonly UnityEngine.UIElements.CreationContext Default;
        public System.Collections.Generic.Dictionary<string, UnityEngine.UIElements.VisualElement> slotInsertionPoints { get; }
        public UnityEngine.UIElements.VisualElement target { get; }
        public UnityEngine.UIElements.VisualTreeAsset visualTreeAsset { get; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.CreationContext other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.CreationContext context1, UnityEngine.UIElements.CreationContext context2);
        public static bool operator !=(UnityEngine.UIElements.CreationContext context1, UnityEngine.UIElements.CreationContext context2);
    }

    public struct Cursor : System.IEquatable<UnityEngine.UIElements.Cursor>
    {
        public UnityEngine.Vector2 hotspot { get; set; }
        public UnityEngine.Texture2D texture { get; set; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.Cursor other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.Cursor style1, UnityEngine.UIElements.Cursor style2);
        public static bool operator !=(UnityEngine.UIElements.Cursor style1, UnityEngine.UIElements.Cursor style2);
        public virtual string ToString();
    }

    public struct CustomStyleProperty<T> : System.IEquatable<UnityEngine.UIElements.CustomStyleProperty<T>>
    {
        public string name { get; }
        public CustomStyleProperty(string propertyName) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.CustomStyleProperty<T> other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.CustomStyleProperty<T> a, UnityEngine.UIElements.CustomStyleProperty<T> b);
        public static bool operator !=(UnityEngine.UIElements.CustomStyleProperty<T> a, UnityEngine.UIElements.CustomStyleProperty<T> b);
    }

    public class CustomStyleResolvedEvent : UnityEngine.UIElements.EventBase<UnityEngine.UIElements.CustomStyleResolvedEvent>
    {
        public UnityEngine.UIElements.ICustomStyle customStyle { get; }
        public CustomStyleResolvedEvent() {}
    }

    public class DetachFromPanelEvent : UnityEngine.UIElements.PanelChangedEventBase<UnityEngine.UIElements.DetachFromPanelEvent>
    {
        public DetachFromPanelEvent() {}
    }

    public enum DisplayStyle
    {
        public const UnityEngine.UIElements.DisplayStyle Flex = 0;
        public const UnityEngine.UIElements.DisplayStyle None = 1;
        public int value__;
    }

    public abstract class DragAndDropEventBase<T> : UnityEngine.UIElements.MouseEventBase<T>, UnityEngine.UIElements.IDragAndDropEvent where T : UnityEngine.UIElements.DragAndDropEventBase<T>, new()
    {
        protected DragAndDropEventBase() {}
    }

    public class DragEnterEvent : UnityEngine.UIElements.DragAndDropEventBase<UnityEngine.UIElements.DragEnterEvent>
    {
        public DragEnterEvent() {}
        protected virtual void Init();
    }

    public class DragExitedEvent : UnityEngine.UIElements.DragAndDropEventBase<UnityEngine.UIElements.DragExitedEvent>
    {
        public DragExitedEvent() {}
        public static UnityEngine.UIElements.DragExitedEvent GetPooled(UnityEngine.Event systemEvent);
        protected virtual void Init();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public class DragLeaveEvent : UnityEngine.UIElements.DragAndDropEventBase<UnityEngine.UIElements.DragLeaveEvent>
    {
        public DragLeaveEvent() {}
        protected virtual void Init();
    }

    public class DragPerformEvent : UnityEngine.UIElements.DragAndDropEventBase<UnityEngine.UIElements.DragPerformEvent>
    {
        public DragPerformEvent() {}
    }

    public class DragUpdatedEvent : UnityEngine.UIElements.DragAndDropEventBase<UnityEngine.UIElements.DragUpdatedEvent>
    {
        public DragUpdatedEvent() {}
        public static UnityEngine.UIElements.DragUpdatedEvent GetPooled(UnityEngine.Event systemEvent);
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public class DropdownMenu
    {
        public DropdownMenu() {}
        public void AppendAction(string actionName, System.Action<UnityEngine.UIElements.DropdownMenuAction> action, UnityEngine.UIElements.DropdownMenuAction.Status status = 1);
        public void AppendAction(string actionName, System.Action<UnityEngine.UIElements.DropdownMenuAction> action, System.Func<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status> actionStatusCallback, object userData = default(object));
        public void AppendSeparator(string subMenuPath = default(string));
        public void InsertAction(int atIndex, string actionName, System.Action<UnityEngine.UIElements.DropdownMenuAction> action, UnityEngine.UIElements.DropdownMenuAction.Status status = 1);
        public void InsertAction(int atIndex, string actionName, System.Action<UnityEngine.UIElements.DropdownMenuAction> action, System.Func<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status> actionStatusCallback, object userData = default(object));
        public void InsertSeparator(string subMenuPath, int atIndex);
        public System.Collections.Generic.List<UnityEngine.UIElements.DropdownMenuItem> MenuItems();
        public void PrepareForDisplay(UnityEngine.UIElements.EventBase e);
        public void RemoveItemAt(int index);
    }

    public class DropdownMenuAction : UnityEngine.UIElements.DropdownMenuItem
    {
        public UnityEngine.UIElements.DropdownMenuEventInfo eventInfo { get; }
        public string name { get; }
        public UnityEngine.UIElements.DropdownMenuAction.Status status { get; }
        public object userData { get; }
        public DropdownMenuAction(string actionName, System.Action<UnityEngine.UIElements.DropdownMenuAction> actionCallback, System.Func<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status> actionStatusCallback, object userData = default(object)) {}
        public static UnityEngine.UIElements.DropdownMenuAction.Status AlwaysDisabled(UnityEngine.UIElements.DropdownMenuAction a);
        public static UnityEngine.UIElements.DropdownMenuAction.Status AlwaysEnabled(UnityEngine.UIElements.DropdownMenuAction a);
        public void Execute();
        public void UpdateActionStatus(UnityEngine.UIElements.DropdownMenuEventInfo eventInfo);
        [System.Flags] public enum Status
        {
            public const UnityEngine.UIElements.DropdownMenuAction.Status Checked = 4;
            public const UnityEngine.UIElements.DropdownMenuAction.Status Disabled = 2;
            public const UnityEngine.UIElements.DropdownMenuAction.Status Hidden = 8;
            public const UnityEngine.UIElements.DropdownMenuAction.Status None = 0;
            public const UnityEngine.UIElements.DropdownMenuAction.Status Normal = 1;
            public int value__;
        }
    }

    public class DropdownMenuEventInfo
    {
        public UnityEngine.Vector2 localMousePosition { get; }
        public UnityEngine.EventModifiers modifiers { get; }
        public UnityEngine.Vector2 mousePosition { get; }
        public DropdownMenuEventInfo(UnityEngine.UIElements.EventBase e) {}
    }

    public abstract class DropdownMenuItem
    {
        protected DropdownMenuItem() {}
    }

    public class DropdownMenuSeparator : UnityEngine.UIElements.DropdownMenuItem
    {
        public string subMenuPath { get; }
        public DropdownMenuSeparator(string subMenuPath) {}
    }

    public delegate bool DynamicAtlasCustomFilter(UnityEngine.Texture2D texture, ref UnityEngine.UIElements.DynamicAtlasFilters filtersToApply);

    [System.Flags] public enum DynamicAtlasFilters
    {
        public const UnityEngine.UIElements.DynamicAtlasFilters ColorSpace = 8;
        public const UnityEngine.UIElements.DynamicAtlasFilters FilterMode = 16;
        public const UnityEngine.UIElements.DynamicAtlasFilters Format = 4;
        public const UnityEngine.UIElements.DynamicAtlasFilters None = 0;
        public const UnityEngine.UIElements.DynamicAtlasFilters Readability = 1;
        public const UnityEngine.UIElements.DynamicAtlasFilters Size = 2;
        public int value__;
    }

    public abstract class EventBase : System.IDisposable
    {
        public bool bubbles { get; protected set; }
        public virtual UnityEngine.UIElements.IEventHandler currentTarget { get; }
        public bool dispatch { get; }
        public virtual long eventTypeId { get; }
        public UnityEngine.Event imguiEvent { get; protected set; }
        public bool isDefaultPrevented { get; }
        public bool isImmediatePropagationStopped { get; }
        public bool isPropagationStopped { get; }
        public UnityEngine.Vector2 originalMousePosition { get; }
        protected bool pooled { get; set; }
        public UnityEngine.UIElements.PropagationPhase propagationPhase { get; }
        public UnityEngine.UIElements.IEventHandler target { get; set; }
        public long timestamp { get; }
        public bool tricklesDown { get; protected set; }
        protected EventBase() {}
        public abstract void Dispose();
        protected virtual void Init();
        [System.Obsolete(@"Override PostDispatch(IPanel panel) instead.")] protected virtual void PostDispatch();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
        [System.Obsolete(@"Override PreDispatch(IPanel panel) instead.")] protected virtual void PreDispatch();
        protected virtual void PreDispatch(UnityEngine.UIElements.IPanel panel);
        public void PreventDefault();
        protected static long RegisterEventType();
        public void StopImmediatePropagation();
        public void StopPropagation();
    }

    public abstract class EventBase<T> : UnityEngine.UIElements.EventBase where T : UnityEngine.UIElements.EventBase<T>, new()
    {
        public virtual long eventTypeId { get; }
        protected EventBase() {}
        public virtual void Dispose();
        public static T GetPooled();
        protected virtual void Init();
        public static long TypeId();
    }

    public delegate void EventCallback<TEventType>(TEventType evt);

    public delegate void EventCallback<TEventType, TCallbackArgs>(TEventType evt, TCallbackArgs userArgs);

    public sealed class EventDispatcher
    {
    }

    public struct EventDispatcherGate : System.IDisposable, System.IEquatable<UnityEngine.UIElements.EventDispatcherGate>
    {
        public EventDispatcherGate(UnityEngine.UIElements.EventDispatcher d) {}
        public virtual void Dispose();
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.EventDispatcherGate other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.EventDispatcherGate left, UnityEngine.UIElements.EventDispatcherGate right);
        public static bool operator !=(UnityEngine.UIElements.EventDispatcherGate left, UnityEngine.UIElements.EventDispatcherGate right);
    }

    public class ExecuteCommandEvent : UnityEngine.UIElements.CommandEventBase<UnityEngine.UIElements.ExecuteCommandEvent>
    {
        public ExecuteCommandEvent() {}
    }

    public enum FlexDirection
    {
        public const UnityEngine.UIElements.FlexDirection Column = 0;
        public const UnityEngine.UIElements.FlexDirection ColumnReverse = 1;
        public const UnityEngine.UIElements.FlexDirection Row = 2;
        public const UnityEngine.UIElements.FlexDirection RowReverse = 3;
        public int value__;
    }

    public abstract class Focusable : UnityEngine.UIElements.CallbackEventHandler
    {
        public virtual bool canGrabFocus { get; }
        public bool delegatesFocus { get; set; }
        public bool focusable { get; set; }
        public abstract UnityEngine.UIElements.FocusController focusController { get; }
        public int tabIndex { get; set; }
        protected Focusable() {}
        public virtual void Blur();
        protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
        public virtual void Focus();
    }

    public class FocusChangeDirection : System.IDisposable
    {
        protected static UnityEngine.UIElements.FocusChangeDirection lastValue { get; }
        public static UnityEngine.UIElements.FocusChangeDirection none { get; }
        public static UnityEngine.UIElements.FocusChangeDirection unspecified { get; }
        protected FocusChangeDirection(int value) {}
        protected virtual void Dispose();
        public static int op_Implicit(UnityEngine.UIElements.FocusChangeDirection fcd);
    }

    public class FocusController
    {
        public UnityEngine.UIElements.Focusable focusedElement { get; }
        public FocusController(UnityEngine.UIElements.IFocusRing focusRing) {}
    }

    public class FocusEvent : UnityEngine.UIElements.FocusEventBase<UnityEngine.UIElements.FocusEvent>
    {
        public FocusEvent() {}
        protected virtual void PreDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public abstract class FocusEventBase<T> : UnityEngine.UIElements.EventBase<T>, UnityEngine.UIElements.IFocusEvent where T : UnityEngine.UIElements.FocusEventBase<T>, new()
    {
        public virtual UnityEngine.UIElements.FocusChangeDirection direction { get; }
        protected UnityEngine.UIElements.FocusController focusController { get; }
        public virtual UnityEngine.UIElements.Focusable relatedTarget { get; }
        protected FocusEventBase() {}
        public static T GetPooled(UnityEngine.UIElements.IEventHandler target, UnityEngine.UIElements.Focusable relatedTarget, UnityEngine.UIElements.FocusChangeDirection direction, UnityEngine.UIElements.FocusController focusController, bool bIsFocusDelegated = False);
        protected virtual void Init();
    }

    public class FocusInEvent : UnityEngine.UIElements.FocusEventBase<UnityEngine.UIElements.FocusInEvent>
    {
        public FocusInEvent() {}
        protected virtual void Init();
    }

    public class FocusOutEvent : UnityEngine.UIElements.FocusEventBase<UnityEngine.UIElements.FocusOutEvent>
    {
        public FocusOutEvent() {}
        protected virtual void Init();
    }

    public class Foldout : UnityEngine.UIElements.BindableElement, UnityEngine.UIElements.INotifyValueChanged<bool>
    {
        public static readonly string contentUssClassName;
        public static readonly string toggleUssClassName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public string text { get; set; }
        public virtual bool value { get; set; }
        public Foldout() {}
        public virtual void SetValueWithoutNotify(bool newValue);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.Foldout, UnityEngine.UIElements.Foldout.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.BindableElement.UxmlTraits
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public struct FontDefinition : System.IEquatable<UnityEngine.UIElements.FontDefinition>
    {
        public UnityEngine.Font font { get; set; }
        public UnityEngine.Object fontAsset { get; set; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.FontDefinition other);
        public static UnityEngine.UIElements.FontDefinition FromFont(UnityEngine.Font f);
        public static UnityEngine.UIElements.FontDefinition FromSDFFont(UnityEngine.Object f);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.FontDefinition left, UnityEngine.UIElements.FontDefinition right);
        public static bool operator !=(UnityEngine.UIElements.FontDefinition left, UnityEngine.UIElements.FontDefinition right);
        public virtual string ToString();
    }

    public class GeometryChangedEvent : UnityEngine.UIElements.EventBase<UnityEngine.UIElements.GeometryChangedEvent>
    {
        public UnityEngine.Rect newRect { get; }
        public UnityEngine.Rect oldRect { get; }
        public GeometryChangedEvent() {}
        public static UnityEngine.UIElements.GeometryChangedEvent GetPooled(UnityEngine.Rect oldRect, UnityEngine.Rect newRect);
        protected virtual void Init();
    }

    public class HelpBox : UnityEngine.UIElements.VisualElement
    {
        public static readonly string iconErrorUssClassName;
        public static readonly string iconInfoUssClassName;
        public static readonly string iconUssClassName;
        public static readonly string iconwarningUssClassName;
        public static readonly string labelUssClassName;
        public static readonly string ussClassName;
        public UnityEngine.UIElements.HelpBoxMessageType messageType { get; set; }
        public string text { get; set; }
        public HelpBox() {}
        public HelpBox(string text, UnityEngine.UIElements.HelpBoxMessageType messageType) {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.HelpBox, UnityEngine.UIElements.HelpBox.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public enum HelpBoxMessageType
    {
        public const UnityEngine.UIElements.HelpBoxMessageType Error = 3;
        public const UnityEngine.UIElements.HelpBoxMessageType Info = 1;
        public const UnityEngine.UIElements.HelpBoxMessageType None = 0;
        public int value__;
        public const UnityEngine.UIElements.HelpBoxMessageType Warning = 2;
    }

    public interface IBindable
    {
        public abstract UnityEngine.UIElements.IBinding binding { get; set; }
        public abstract string bindingPath { get; set; }
    }

    public interface IBinding
    {
        public abstract void PreUpdate();
        public abstract void Release();
        public abstract void Update();
    }

    [System.Runtime.CompilerServices.Extension] public static class IBindingExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static bool IsBound(UnityEngine.UIElements.IBindable control);
    }

    public interface IChangeEvent
    {
    }

    public interface ICommandEvent
    {
        public abstract string commandName { get; }
    }

    public interface ICustomStyle
    {
        public abstract bool TryGetValue(UnityEngine.UIElements.CustomStyleProperty<bool> property, out bool value);
        public abstract bool TryGetValue(UnityEngine.UIElements.CustomStyleProperty<int> property, out int value);
        public abstract bool TryGetValue(UnityEngine.UIElements.CustomStyleProperty<float> property, out float value);
        public abstract bool TryGetValue(UnityEngine.UIElements.CustomStyleProperty<string> property, out string value);
        public abstract bool TryGetValue(UnityEngine.UIElements.CustomStyleProperty<UnityEngine.Color> property, out UnityEngine.Color value);
        public abstract bool TryGetValue(UnityEngine.UIElements.CustomStyleProperty<UnityEngine.Sprite> property, out UnityEngine.Sprite value);
        public abstract bool TryGetValue(UnityEngine.UIElements.CustomStyleProperty<UnityEngine.Texture2D> property, out UnityEngine.Texture2D value);
        public abstract bool TryGetValue(UnityEngine.UIElements.CustomStyleProperty<UnityEngine.UIElements.VectorImage> property, out UnityEngine.UIElements.VectorImage value);
    }

    public interface IDragAndDropEvent
    {
    }

    public interface IEventHandler
    {
        public abstract void HandleEvent(UnityEngine.UIElements.EventBase evt);
        public abstract bool HasBubbleUpHandlers();
        public abstract bool HasTrickleDownHandlers();
        public abstract void SendEvent(UnityEngine.UIElements.EventBase e);
    }

    public interface IExperimentalFeatures
    {
        public abstract UnityEngine.UIElements.Experimental.ITransitionAnimations animation { get; }
    }

    public interface IFocusEvent
    {
        public abstract UnityEngine.UIElements.FocusChangeDirection direction { get; }
        public abstract UnityEngine.UIElements.Focusable relatedTarget { get; }
    }

    public interface IFocusRing
    {
        public abstract UnityEngine.UIElements.FocusChangeDirection GetFocusChangeDirection(UnityEngine.UIElements.Focusable currentFocusable, UnityEngine.UIElements.EventBase e);
        public abstract UnityEngine.UIElements.Focusable GetNextFocusable(UnityEngine.UIElements.Focusable currentFocusable, UnityEngine.UIElements.FocusChangeDirection direction);
    }

    public interface IKeyboardEvent
    {
        public abstract bool actionKey { get; }
        public abstract bool altKey { get; }
        public abstract char character { get; }
        public abstract bool commandKey { get; }
        public abstract bool ctrlKey { get; }
        public abstract UnityEngine.KeyCode keyCode { get; }
        public abstract UnityEngine.EventModifiers modifiers { get; }
        public abstract bool shiftKey { get; }
    }

    public class Image : UnityEngine.UIElements.VisualElement
    {
        public static readonly string ussClassName;
        public UnityEngine.Texture image { get; set; }
        public UnityEngine.ScaleMode scaleMode { get; set; }
        public UnityEngine.Rect sourceRect { get; set; }
        public UnityEngine.Sprite sprite { get; set; }
        public UnityEngine.Color tintColor { get; set; }
        public UnityEngine.Rect uv { get; set; }
        public UnityEngine.UIElements.VectorImage vectorImage { get; set; }
        public Image() {}
        protected virtual UnityEngine.Vector2 DoMeasure(float desiredWidth, UnityEngine.UIElements.VisualElement.MeasureMode widthMode, float desiredHeight, UnityEngine.UIElements.VisualElement.MeasureMode heightMode);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.Image, UnityEngine.UIElements.Image.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
        }
    }

    public interface IManipulator
    {
        public abstract UnityEngine.UIElements.VisualElement target { get; set; }
    }

    public class IMGUIContainer : UnityEngine.UIElements.VisualElement, System.IDisposable
    {
        public static readonly string ussClassName;
        public virtual bool canGrabFocus { get; }
        public UnityEngine.UIElements.ContextType contextType { get; set; }
        public bool cullingEnabled { get; set; }
        public System.Action onGUIHandler { get; set; }
        public IMGUIContainer() {}
        public IMGUIContainer(System.Action onGUIHandler) {}
        public virtual void Dispose();
        protected virtual void Dispose(bool disposeManaged);
        protected virtual UnityEngine.Vector2 DoMeasure(float desiredWidth, UnityEngine.UIElements.VisualElement.MeasureMode widthMode, float desiredHeight, UnityEngine.UIElements.VisualElement.MeasureMode heightMode);
        protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
        public virtual void HandleEvent(UnityEngine.UIElements.EventBase evt);
        public void MarkDirtyLayout();
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.IMGUIContainer, UnityEngine.UIElements.IMGUIContainer.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
        }
    }

    public class IMGUIEvent : UnityEngine.UIElements.EventBase<UnityEngine.UIElements.IMGUIEvent>
    {
        public IMGUIEvent() {}
        public static UnityEngine.UIElements.IMGUIEvent GetPooled(UnityEngine.Event systemEvent);
        protected virtual void Init();
    }

    public interface IMixedValueSupport
    {
        public abstract bool showMixedValue { get; set; }
    }

    public abstract class ImmediateModeElement : UnityEngine.UIElements.VisualElement
    {
        public bool cullingEnabled { get; set; }
        public ImmediateModeElement() {}
        protected abstract void ImmediateRepaint();
    }

    public interface IMouseCaptureEvent
    {
    }

    public interface IMouseEvent
    {
        public abstract bool actionKey { get; }
        public abstract bool altKey { get; }
        public abstract int button { get; }
        public abstract int clickCount { get; }
        public abstract bool commandKey { get; }
        public abstract bool ctrlKey { get; }
        public abstract UnityEngine.Vector2 localMousePosition { get; }
        public abstract UnityEngine.EventModifiers modifiers { get; }
        public abstract UnityEngine.Vector2 mouseDelta { get; }
        public abstract UnityEngine.Vector2 mousePosition { get; }
        public abstract int pressedButtons { get; }
        public abstract bool shiftKey { get; }
    }

    public interface INavigationEvent
    {
    }

    public interface INotifyValueChanged<T>
    {
        public abstract T value { get; set; }
        public abstract void SetValueWithoutNotify(T newValue);
    }

    [System.Runtime.CompilerServices.Extension] public static class INotifyValueChangedExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static bool RegisterValueChangedCallback<T>(UnityEngine.UIElements.INotifyValueChanged<T> control, UnityEngine.UIElements.EventCallback<UnityEngine.UIElements.ChangeEvent<T>> callback);
        [System.Runtime.CompilerServices.Extension] public static bool UnregisterValueChangedCallback<T>(UnityEngine.UIElements.INotifyValueChanged<T> control, UnityEngine.UIElements.EventCallback<UnityEngine.UIElements.ChangeEvent<T>> callback);
    }

    public class InputEvent : UnityEngine.UIElements.EventBase<UnityEngine.UIElements.InputEvent>
    {
        public string newData { get; protected set; }
        public string previousData { get; protected set; }
        public InputEvent() {}
        public static UnityEngine.UIElements.InputEvent GetPooled(string previousData, string newData);
        protected virtual void Init();
    }

    public interface IPanel : System.IDisposable
    {
        public abstract UnityEngine.UIElements.ContextType contextType { get; }
        public abstract UnityEngine.UIElements.ContextualMenuManager contextualMenuManager { get; }
        public abstract UnityEngine.UIElements.EventDispatcher dispatcher { get; }
        public abstract UnityEngine.UIElements.FocusController focusController { get; }
        public abstract UnityEngine.UIElements.VisualElement visualTree { get; }
        public abstract UnityEngine.UIElements.VisualElement Pick(UnityEngine.Vector2 point);
        public abstract UnityEngine.UIElements.VisualElement PickAll(UnityEngine.Vector2 point, System.Collections.Generic.List<UnityEngine.UIElements.VisualElement> picked);
    }

    public interface IPanelChangedEvent
    {
    }

    public interface IPointerCaptureEvent
    {
    }

    public interface IPointerEvent
    {
        public abstract bool actionKey { get; }
        public abstract float altitudeAngle { get; }
        public abstract bool altKey { get; }
        public abstract float azimuthAngle { get; }
        public abstract int button { get; }
        public abstract int clickCount { get; }
        public abstract bool commandKey { get; }
        public abstract bool ctrlKey { get; }
        public abstract UnityEngine.Vector3 deltaPosition { get; }
        public abstract float deltaTime { get; }
        public abstract bool isPrimary { get; }
        public abstract UnityEngine.Vector3 localPosition { get; }
        public abstract UnityEngine.EventModifiers modifiers { get; }
        public abstract int pointerId { get; }
        public abstract string pointerType { get; }
        public abstract UnityEngine.Vector3 position { get; }
        public abstract int pressedButtons { get; }
        public abstract float pressure { get; }
        public abstract UnityEngine.Vector2 radius { get; }
        public abstract UnityEngine.Vector2 radiusVariance { get; }
        public abstract bool shiftKey { get; }
        public abstract float tangentialPressure { get; }
        public abstract float twist { get; }
    }

    public interface IResolvedStyle
    {
        public abstract UnityEngine.UIElements.Align alignContent { get; }
        public abstract UnityEngine.UIElements.Align alignItems { get; }
        public abstract UnityEngine.UIElements.Align alignSelf { get; }
        public abstract UnityEngine.Color backgroundColor { get; }
        public abstract UnityEngine.UIElements.Background backgroundImage { get; }
        public abstract UnityEngine.Color borderBottomColor { get; }
        public abstract float borderBottomLeftRadius { get; }
        public abstract float borderBottomRightRadius { get; }
        public abstract float borderBottomWidth { get; }
        public abstract UnityEngine.Color borderLeftColor { get; }
        public abstract float borderLeftWidth { get; }
        public abstract UnityEngine.Color borderRightColor { get; }
        public abstract float borderRightWidth { get; }
        public abstract UnityEngine.Color borderTopColor { get; }
        public abstract float borderTopLeftRadius { get; }
        public abstract float borderTopRightRadius { get; }
        public abstract float borderTopWidth { get; }
        public abstract float bottom { get; }
        public abstract UnityEngine.Color color { get; }
        public abstract UnityEngine.UIElements.DisplayStyle display { get; }
        public abstract UnityEngine.UIElements.StyleFloat flexBasis { get; }
        public abstract UnityEngine.UIElements.FlexDirection flexDirection { get; }
        public abstract float flexGrow { get; }
        public abstract float flexShrink { get; }
        public abstract UnityEngine.UIElements.Wrap flexWrap { get; }
        public abstract float fontSize { get; }
        public abstract float height { get; }
        public abstract UnityEngine.UIElements.Justify justifyContent { get; }
        public abstract float left { get; }
        public abstract float letterSpacing { get; }
        public abstract float marginBottom { get; }
        public abstract float marginLeft { get; }
        public abstract float marginRight { get; }
        public abstract float marginTop { get; }
        public abstract UnityEngine.UIElements.StyleFloat maxHeight { get; }
        public abstract UnityEngine.UIElements.StyleFloat maxWidth { get; }
        public abstract UnityEngine.UIElements.StyleFloat minHeight { get; }
        public abstract UnityEngine.UIElements.StyleFloat minWidth { get; }
        public abstract float opacity { get; }
        public abstract float paddingBottom { get; }
        public abstract float paddingLeft { get; }
        public abstract float paddingRight { get; }
        public abstract float paddingTop { get; }
        public abstract UnityEngine.UIElements.Position position { get; }
        public abstract float right { get; }
        public abstract UnityEngine.UIElements.TextOverflow textOverflow { get; }
        public abstract float top { get; }
        public abstract UnityEngine.Color unityBackgroundImageTintColor { get; }
        public abstract UnityEngine.ScaleMode unityBackgroundScaleMode { get; }
        public abstract UnityEngine.Font unityFont { get; }
        public abstract UnityEngine.UIElements.FontDefinition unityFontDefinition { get; }
        public abstract UnityEngine.FontStyle unityFontStyleAndWeight { get; }
        public abstract float unityParagraphSpacing { get; }
        public abstract int unitySliceBottom { get; }
        public abstract int unitySliceLeft { get; }
        public abstract int unitySliceRight { get; }
        public abstract int unitySliceTop { get; }
        public abstract UnityEngine.TextAnchor unityTextAlign { get; }
        public abstract UnityEngine.Color unityTextOutlineColor { get; }
        public abstract float unityTextOutlineWidth { get; }
        public abstract UnityEngine.UIElements.TextOverflowPosition unityTextOverflowPosition { get; }
        public abstract UnityEngine.UIElements.Visibility visibility { get; }
        public abstract UnityEngine.UIElements.WhiteSpace whiteSpace { get; }
        public abstract float width { get; }
        public abstract float wordSpacing { get; }
    }

    public interface IStyle
    {
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align> alignContent { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align> alignItems { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align> alignSelf { get; set; }
        public abstract UnityEngine.UIElements.StyleColor backgroundColor { get; set; }
        public abstract UnityEngine.UIElements.StyleBackground backgroundImage { get; set; }
        public abstract UnityEngine.UIElements.StyleColor borderBottomColor { get; set; }
        public abstract UnityEngine.UIElements.StyleLength borderBottomLeftRadius { get; set; }
        public abstract UnityEngine.UIElements.StyleLength borderBottomRightRadius { get; set; }
        public abstract UnityEngine.UIElements.StyleFloat borderBottomWidth { get; set; }
        public abstract UnityEngine.UIElements.StyleColor borderLeftColor { get; set; }
        public abstract UnityEngine.UIElements.StyleFloat borderLeftWidth { get; set; }
        public abstract UnityEngine.UIElements.StyleColor borderRightColor { get; set; }
        public abstract UnityEngine.UIElements.StyleFloat borderRightWidth { get; set; }
        public abstract UnityEngine.UIElements.StyleColor borderTopColor { get; set; }
        public abstract UnityEngine.UIElements.StyleLength borderTopLeftRadius { get; set; }
        public abstract UnityEngine.UIElements.StyleLength borderTopRightRadius { get; set; }
        public abstract UnityEngine.UIElements.StyleFloat borderTopWidth { get; set; }
        public abstract UnityEngine.UIElements.StyleLength bottom { get; set; }
        public abstract UnityEngine.UIElements.StyleColor color { get; set; }
        public abstract UnityEngine.UIElements.StyleCursor cursor { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.DisplayStyle> display { get; set; }
        public abstract UnityEngine.UIElements.StyleLength flexBasis { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.FlexDirection> flexDirection { get; set; }
        public abstract UnityEngine.UIElements.StyleFloat flexGrow { get; set; }
        public abstract UnityEngine.UIElements.StyleFloat flexShrink { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Wrap> flexWrap { get; set; }
        public abstract UnityEngine.UIElements.StyleLength fontSize { get; set; }
        public abstract UnityEngine.UIElements.StyleLength height { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Justify> justifyContent { get; set; }
        public abstract UnityEngine.UIElements.StyleLength left { get; set; }
        public abstract UnityEngine.UIElements.StyleLength letterSpacing { get; set; }
        public abstract UnityEngine.UIElements.StyleLength marginBottom { get; set; }
        public abstract UnityEngine.UIElements.StyleLength marginLeft { get; set; }
        public abstract UnityEngine.UIElements.StyleLength marginRight { get; set; }
        public abstract UnityEngine.UIElements.StyleLength marginTop { get; set; }
        public abstract UnityEngine.UIElements.StyleLength maxHeight { get; set; }
        public abstract UnityEngine.UIElements.StyleLength maxWidth { get; set; }
        public abstract UnityEngine.UIElements.StyleLength minHeight { get; set; }
        public abstract UnityEngine.UIElements.StyleLength minWidth { get; set; }
        public abstract UnityEngine.UIElements.StyleFloat opacity { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Overflow> overflow { get; set; }
        public abstract UnityEngine.UIElements.StyleLength paddingBottom { get; set; }
        public abstract UnityEngine.UIElements.StyleLength paddingLeft { get; set; }
        public abstract UnityEngine.UIElements.StyleLength paddingRight { get; set; }
        public abstract UnityEngine.UIElements.StyleLength paddingTop { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Position> position { get; set; }
        public abstract UnityEngine.UIElements.StyleLength right { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.TextOverflow> textOverflow { get; set; }
        public abstract UnityEngine.UIElements.StyleTextShadow textShadow { get; set; }
        public abstract UnityEngine.UIElements.StyleLength top { get; set; }
        public abstract UnityEngine.UIElements.StyleColor unityBackgroundImageTintColor { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.ScaleMode> unityBackgroundScaleMode { get; set; }
        public abstract UnityEngine.UIElements.StyleFont unityFont { get; set; }
        public abstract UnityEngine.UIElements.StyleFontDefinition unityFontDefinition { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.FontStyle> unityFontStyleAndWeight { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.OverflowClipBox> unityOverflowClipBox { get; set; }
        public abstract UnityEngine.UIElements.StyleLength unityParagraphSpacing { get; set; }
        public abstract UnityEngine.UIElements.StyleInt unitySliceBottom { get; set; }
        public abstract UnityEngine.UIElements.StyleInt unitySliceLeft { get; set; }
        public abstract UnityEngine.UIElements.StyleInt unitySliceRight { get; set; }
        public abstract UnityEngine.UIElements.StyleInt unitySliceTop { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.TextAnchor> unityTextAlign { get; set; }
        public abstract UnityEngine.UIElements.StyleColor unityTextOutlineColor { get; set; }
        public abstract UnityEngine.UIElements.StyleFloat unityTextOutlineWidth { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.TextOverflowPosition> unityTextOverflowPosition { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Visibility> visibility { get; set; }
        public abstract UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.WhiteSpace> whiteSpace { get; set; }
        public abstract UnityEngine.UIElements.StyleLength width { get; set; }
        public abstract UnityEngine.UIElements.StyleLength wordSpacing { get; set; }
    }

    public interface ITransform
    {
        public abstract UnityEngine.Matrix4x4 matrix { get; }
        public abstract UnityEngine.Vector3 position { get; set; }
        public abstract UnityEngine.Quaternion rotation { get; set; }
        public abstract UnityEngine.Vector3 scale { get; set; }
    }

    public interface IUxmlAttributes
    {
        public abstract bool TryGetAttributeValue(string attributeName, out string value);
    }

    public interface IUxmlFactory
    {
        public abstract bool canHaveAnyAttribute { get; }
        public abstract string substituteForTypeName { get; }
        public abstract string substituteForTypeNamespace { get; }
        public abstract string substituteForTypeQualifiedName { get; }
        public abstract System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription> uxmlAttributesDescription { get; }
        public abstract System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
        public abstract string uxmlName { get; }
        public abstract string uxmlNamespace { get; }
        public abstract string uxmlQualifiedName { get; }
        public abstract bool AcceptsAttributeBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public abstract UnityEngine.UIElements.VisualElement Create(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
    }

    public interface IVisualElementScheduledItem
    {
        public abstract UnityEngine.UIElements.VisualElement element { get; }
        public abstract bool isActive { get; }
        public abstract UnityEngine.UIElements.IVisualElementScheduledItem Every(long intervalMs);
        public abstract void ExecuteLater(long delayMs);
        public abstract UnityEngine.UIElements.IVisualElementScheduledItem ForDuration(long durationMs);
        public abstract void Pause();
        public abstract void Resume();
        public abstract UnityEngine.UIElements.IVisualElementScheduledItem StartingIn(long delayMs);
        public abstract UnityEngine.UIElements.IVisualElementScheduledItem Until(System.Func<bool> stopCondition);
    }

    public interface IVisualElementScheduler
    {
        public abstract UnityEngine.UIElements.IVisualElementScheduledItem Execute(System.Action updateEvent);
        public abstract UnityEngine.UIElements.IVisualElementScheduledItem Execute(System.Action<UnityEngine.UIElements.TimerState> timerUpdateEvent);
    }

    public enum Justify
    {
        public const UnityEngine.UIElements.Justify Center = 1;
        public const UnityEngine.UIElements.Justify FlexEnd = 2;
        public const UnityEngine.UIElements.Justify FlexStart = 0;
        public const UnityEngine.UIElements.Justify SpaceAround = 4;
        public const UnityEngine.UIElements.Justify SpaceBetween = 3;
        public int value__;
    }

    public abstract class KeyboardEventBase<T> : UnityEngine.UIElements.EventBase<T>, UnityEngine.UIElements.IKeyboardEvent where T : UnityEngine.UIElements.KeyboardEventBase<T>, new()
    {
        public virtual bool actionKey { get; }
        public virtual bool altKey { get; }
        public virtual char character { get; protected set; }
        public virtual bool commandKey { get; }
        public virtual bool ctrlKey { get; }
        public virtual UnityEngine.KeyCode keyCode { get; protected set; }
        public virtual UnityEngine.EventModifiers modifiers { get; protected set; }
        public virtual bool shiftKey { get; }
        protected KeyboardEventBase() {}
        public static T GetPooled(UnityEngine.Event systemEvent);
        public static T GetPooled(char c, UnityEngine.KeyCode keyCode, UnityEngine.EventModifiers modifiers);
        protected virtual void Init();
    }

    public class KeyDownEvent : UnityEngine.UIElements.KeyboardEventBase<UnityEngine.UIElements.KeyDownEvent>
    {
        public KeyDownEvent() {}
    }

    public class KeyUpEvent : UnityEngine.UIElements.KeyboardEventBase<UnityEngine.UIElements.KeyUpEvent>
    {
        public KeyUpEvent() {}
    }

    public class Label : UnityEngine.UIElements.TextElement
    {
        public static readonly string ussClassName;
        public Label() {}
        public Label(string text) {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.Label, UnityEngine.UIElements.Label.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.TextElement.UxmlTraits
        {
            public UxmlTraits() {}
        }
    }

    public struct Length : System.IEquatable<UnityEngine.UIElements.Length>
    {
        public UnityEngine.UIElements.LengthUnit unit { get; set; }
        public float value { get; set; }
        public Length(float value) {}
        public Length(float value, UnityEngine.UIElements.LengthUnit unit) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.Length other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.Length lhs, UnityEngine.UIElements.Length rhs);
        public static UnityEngine.UIElements.Length op_Implicit(float value);
        public static bool operator !=(UnityEngine.UIElements.Length lhs, UnityEngine.UIElements.Length rhs);
        public static UnityEngine.UIElements.Length Percent(float value);
        public virtual string ToString();
    }

    public enum LengthUnit
    {
        public const UnityEngine.UIElements.LengthUnit Percent = 1;
        public const UnityEngine.UIElements.LengthUnit Pixel = 0;
        public int value__;
    }

    public class ListView : UnityEngine.UIElements.BindableElement, UnityEngine.ISerializationCallbackReceiver
    {
        public static readonly string borderUssClassName;
        public static readonly string dragHoverBarUssClassName;
        public static readonly string itemAlternativeBackgroundUssClassName;
        public static readonly string itemDragHoverUssClassName;
        public static readonly string itemSelectedVariantUssClassName;
        public static readonly string itemUssClassName;
        public static readonly string ussClassName;
        [System.Obsolete(@"onItemChosen is obsolete, use onItemsChosen instead")] public event System.Action<object> onItemChosen;
        public event System.Action<System.Collections.Generic.IEnumerable<object>> onItemsChosen;
        public event System.Action<System.Collections.Generic.IEnumerable<object>> onSelectionChange;
        [System.Obsolete(@"onSelectionChanged is obsolete, use onSelectionChange instead")] public event System.Action<System.Collections.Generic.List<object>> onSelectionChanged;
        public System.Action<UnityEngine.UIElements.VisualElement, int> bindItem { get; set; }
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public bool horizontalScrollingEnabled { get; set; }
        public int itemHeight { get; set; }
        public System.Collections.IList itemsSource { get; set; }
        public System.Func<UnityEngine.UIElements.VisualElement> makeItem { get; set; }
        public bool reorderable { get; set; }
        public float resolvedItemHeight { get; }
        public int selectedIndex { get; set; }
        public System.Collections.Generic.IEnumerable<int> selectedIndices { get; }
        public object selectedItem { get; }
        public System.Collections.Generic.IEnumerable<object> selectedItems { get; }
        public UnityEngine.UIElements.SelectionType selectionType { get; set; }
        public UnityEngine.UIElements.AlternatingRowBackground showAlternatingRowBackgrounds { get; set; }
        public bool showBorder { get; set; }
        public bool showBoundCollectionSize { get; set; }
        public System.Action<UnityEngine.UIElements.VisualElement, int> unbindItem { get; set; }
        public ListView() {}
        public ListView(System.Collections.IList itemsSource, int itemHeight, System.Func<UnityEngine.UIElements.VisualElement> makeItem, System.Action<UnityEngine.UIElements.VisualElement, int> bindItem) {}
        public void AddToSelection(int index);
        public void ClearSelection();
        protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
        public void OnKeyDown(UnityEngine.UIElements.KeyDownEvent evt);
        public void Refresh();
        public void RemoveFromSelection(int index);
        public void ScrollTo(UnityEngine.UIElements.VisualElement visualElement);
        public void ScrollToItem(int index);
        public void SetSelection(System.Collections.Generic.IEnumerable<int> indices);
        public void SetSelection(int index);
        public void SetSelectionWithoutNotify(System.Collections.Generic.IEnumerable<int> indices);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.ListView, UnityEngine.UIElements.ListView.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.BindableElement.UxmlTraits
        {
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public abstract class Manipulator : UnityEngine.UIElements.IManipulator
    {
        public virtual UnityEngine.UIElements.VisualElement target { get; set; }
        protected Manipulator() {}
        protected abstract void RegisterCallbacksOnTarget();
        protected abstract void UnregisterCallbacksFromTarget();
    }

    public struct ManipulatorActivationFilter : System.IEquatable<UnityEngine.UIElements.ManipulatorActivationFilter>
    {
        public UnityEngine.UIElements.MouseButton button { get; set; }
        public int clickCount { get; set; }
        public UnityEngine.EventModifiers modifiers { get; set; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.ManipulatorActivationFilter other);
        public virtual int GetHashCode();
        public bool Matches(UnityEngine.UIElements.IMouseEvent e);
        public bool Matches(UnityEngine.UIElements.IPointerEvent e);
        public static bool operator ==(UnityEngine.UIElements.ManipulatorActivationFilter filter1, UnityEngine.UIElements.ManipulatorActivationFilter filter2);
        public static bool operator !=(UnityEngine.UIElements.ManipulatorActivationFilter filter1, UnityEngine.UIElements.ManipulatorActivationFilter filter2);
    }

    public class MeshGenerationContext
    {
        public UnityEngine.UIElements.VisualElement visualElement { get; }
        public UnityEngine.UIElements.MeshWriteData Allocate(int vertexCount, int indexCount, UnityEngine.Texture texture = default(UnityEngine.Texture));
    }

    public class MeshWriteData
    {
        public int indexCount { get; }
        public UnityEngine.Rect uvRegion { get; }
        public int vertexCount { get; }
        public void SetAllIndices(System.UInt16[] indices);
        public void SetAllIndices(Unity.Collections.NativeSlice<System.UInt16> indices);
        public void SetAllVertices(Unity.Collections.NativeSlice<UnityEngine.UIElements.Vertex> vertices);
        public void SetAllVertices(UnityEngine.UIElements.Vertex[] vertices);
        public void SetNextIndex(System.UInt16 index);
        public void SetNextVertex(UnityEngine.UIElements.Vertex vertex);
    }

    public class MinMaxSlider : UnityEngine.UIElements.BaseField<UnityEngine.Vector2>
    {
        public static readonly string draggerUssClassName;
        public static readonly string inputUssClassName;
        public static readonly string labelUssClassName;
        public static readonly string maxThumbUssClassName;
        public static readonly string minThumbUssClassName;
        public static readonly string trackerUssClassName;
        public static readonly string ussClassName;
        public float highLimit { get; set; }
        public float lowLimit { get; set; }
        public float maxValue { get; set; }
        public float minValue { get; set; }
        public float range { get; }
        public virtual UnityEngine.Vector2 value { get; set; }
        public MinMaxSlider() {}
        public MinMaxSlider(float minValue, float maxValue, float minLimit, float maxLimit) {}
        public MinMaxSlider(string label, float minValue = 0, float maxValue = 10, float minLimit = -3.402823E+38, float maxLimit = 3.402823E+38) {}
        protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
        public virtual void SetValueWithoutNotify(UnityEngine.Vector2 newValue);
        protected virtual void UpdateMixedValueContent();
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.MinMaxSlider, UnityEngine.UIElements.MinMaxSlider.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.BaseField<UnityEngine.Vector2>
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public enum MouseButton
    {
        public const UnityEngine.UIElements.MouseButton LeftMouse = 0;
        public const UnityEngine.UIElements.MouseButton MiddleMouse = 2;
        public const UnityEngine.UIElements.MouseButton RightMouse = 1;
        public int value__;
    }

    [System.Runtime.CompilerServices.Extension] public static class MouseCaptureController
    {
        [System.Runtime.CompilerServices.Extension] public static void CaptureMouse(UnityEngine.UIElements.IEventHandler handler);
        [System.Runtime.CompilerServices.Extension] public static bool HasMouseCapture(UnityEngine.UIElements.IEventHandler handler);
        public static bool IsMouseCaptured();
        public static void ReleaseMouse();
        [System.Runtime.CompilerServices.Extension] public static void ReleaseMouse(UnityEngine.UIElements.IEventHandler handler);
    }

    public class MouseCaptureEvent : UnityEngine.UIElements.MouseCaptureEventBase<UnityEngine.UIElements.MouseCaptureEvent>
    {
        public MouseCaptureEvent() {}
    }

    public abstract class MouseCaptureEventBase<T> : UnityEngine.UIElements.PointerCaptureEventBase<T>, UnityEngine.UIElements.IMouseCaptureEvent where T : UnityEngine.UIElements.MouseCaptureEventBase<T>, new()
    {
        public UnityEngine.UIElements.IEventHandler relatedTarget { get; }
        protected MouseCaptureEventBase() {}
        public static T GetPooled(UnityEngine.UIElements.IEventHandler target, UnityEngine.UIElements.IEventHandler relatedTarget);
        protected virtual void Init();
    }

    public class MouseCaptureOutEvent : UnityEngine.UIElements.MouseCaptureEventBase<UnityEngine.UIElements.MouseCaptureOutEvent>
    {
        public MouseCaptureOutEvent() {}
    }

    public class MouseDownEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.MouseDownEvent>
    {
        public MouseDownEvent() {}
        public static UnityEngine.UIElements.MouseDownEvent GetPooled(UnityEngine.Event systemEvent);
    }

    public class MouseEnterEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.MouseEnterEvent>
    {
        public MouseEnterEvent() {}
        protected virtual void Init();
    }

    public class MouseEnterWindowEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.MouseEnterWindowEvent>
    {
        public MouseEnterWindowEvent() {}
        protected virtual void Init();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public abstract class MouseEventBase<T> : UnityEngine.UIElements.EventBase<T>, UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal where T : UnityEngine.UIElements.MouseEventBase<T>, new()
    {
        public virtual bool actionKey { get; }
        public virtual bool altKey { get; }
        public virtual int button { get; protected set; }
        public virtual int clickCount { get; protected set; }
        public virtual bool commandKey { get; }
        public virtual bool ctrlKey { get; }
        public virtual UnityEngine.UIElements.IEventHandler currentTarget { get; }
        public virtual UnityEngine.Vector2 localMousePosition { get; }
        public virtual UnityEngine.EventModifiers modifiers { get; protected set; }
        public virtual UnityEngine.Vector2 mouseDelta { get; protected set; }
        public virtual UnityEngine.Vector2 mousePosition { get; protected set; }
        public virtual int pressedButtons { get; protected set; }
        public virtual bool shiftKey { get; }
        protected MouseEventBase() {}
        public static T GetPooled(UnityEngine.Event systemEvent);
        public static T GetPooled(UnityEngine.UIElements.IMouseEvent triggerEvent);
        protected static T GetPooled(UnityEngine.UIElements.IPointerEvent pointerEvent);
        public static T GetPooled(UnityEngine.Vector2 position, int button, int clickCount, UnityEngine.Vector2 delta, UnityEngine.EventModifiers modifiers = 0);
        protected virtual void Init();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
        protected virtual void PreDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public class MouseLeaveEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.MouseLeaveEvent>
    {
        public MouseLeaveEvent() {}
        protected virtual void Init();
    }

    public class MouseLeaveWindowEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.MouseLeaveWindowEvent>
    {
        public MouseLeaveWindowEvent() {}
        public static UnityEngine.UIElements.MouseLeaveWindowEvent GetPooled(UnityEngine.Event systemEvent);
        protected virtual void Init();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public abstract class MouseManipulator : UnityEngine.UIElements.Manipulator
    {
        public System.Collections.Generic.List<UnityEngine.UIElements.ManipulatorActivationFilter> activators { get; }
        protected MouseManipulator() {}
        protected bool CanStartManipulation(UnityEngine.UIElements.IMouseEvent e);
        protected bool CanStopManipulation(UnityEngine.UIElements.IMouseEvent e);
    }

    public class MouseMoveEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.MouseMoveEvent>
    {
        public MouseMoveEvent() {}
        public static UnityEngine.UIElements.MouseMoveEvent GetPooled(UnityEngine.Event systemEvent);
    }

    public class MouseOutEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.MouseOutEvent>
    {
        public MouseOutEvent() {}
    }

    public class MouseOverEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.MouseOverEvent>
    {
        public MouseOverEvent() {}
    }

    public class MouseUpEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.MouseUpEvent>
    {
        public MouseUpEvent() {}
        public static UnityEngine.UIElements.MouseUpEvent GetPooled(UnityEngine.Event systemEvent);
    }

    public class NavigationCancelEvent : UnityEngine.UIElements.NavigationEventBase<UnityEngine.UIElements.NavigationCancelEvent>
    {
        public NavigationCancelEvent() {}
    }

    public abstract class NavigationEventBase<T> : UnityEngine.UIElements.EventBase<T>, UnityEngine.UIElements.INavigationEvent where T : UnityEngine.UIElements.NavigationEventBase<T>, new()
    {
        protected NavigationEventBase() {}
        protected virtual void Init();
    }

    public class NavigationMoveEvent : UnityEngine.UIElements.NavigationEventBase<UnityEngine.UIElements.NavigationMoveEvent>
    {
        public UnityEngine.UIElements.NavigationMoveEvent.Direction direction { get; }
        public UnityEngine.Vector2 move { get; }
        public NavigationMoveEvent() {}
        public static UnityEngine.UIElements.NavigationMoveEvent GetPooled(UnityEngine.Vector2 moveVector);
        protected virtual void Init();
        public enum Direction
        {
            public const UnityEngine.UIElements.NavigationMoveEvent.Direction Down = 4;
            public const UnityEngine.UIElements.NavigationMoveEvent.Direction Left = 1;
            public const UnityEngine.UIElements.NavigationMoveEvent.Direction None = 0;
            public const UnityEngine.UIElements.NavigationMoveEvent.Direction Right = 3;
            public const UnityEngine.UIElements.NavigationMoveEvent.Direction Up = 2;
            public int value__;
        }
    }

    public class NavigationSubmitEvent : UnityEngine.UIElements.NavigationEventBase<UnityEngine.UIElements.NavigationSubmitEvent>
    {
        public NavigationSubmitEvent() {}
    }

    public enum Overflow
    {
        public const UnityEngine.UIElements.Overflow Hidden = 1;
        public int value__;
        public const UnityEngine.UIElements.Overflow Visible = 0;
    }

    public enum OverflowClipBox
    {
        public const UnityEngine.UIElements.OverflowClipBox ContentBox = 1;
        public const UnityEngine.UIElements.OverflowClipBox PaddingBox = 0;
        public int value__;
    }

    public abstract class PanelChangedEventBase<T> : UnityEngine.UIElements.EventBase<T>, UnityEngine.UIElements.IPanelChangedEvent where T : UnityEngine.UIElements.PanelChangedEventBase<T>, new()
    {
        public UnityEngine.UIElements.IPanel destinationPanel { get; }
        public UnityEngine.UIElements.IPanel originPanel { get; }
        protected PanelChangedEventBase() {}
        public static T GetPooled(UnityEngine.UIElements.IPanel originPanel, UnityEngine.UIElements.IPanel destinationPanel);
        protected virtual void Init();
    }

    public enum PickingMode
    {
        public const UnityEngine.UIElements.PickingMode Ignore = 1;
        public const UnityEngine.UIElements.PickingMode Position = 0;
        public int value__;
    }

    public sealed class PointerCancelEvent : UnityEngine.UIElements.PointerEventBase<UnityEngine.UIElements.PointerCancelEvent>
    {
        public PointerCancelEvent() {}
        protected virtual void Init();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public class PointerCaptureEvent : UnityEngine.UIElements.PointerCaptureEventBase<UnityEngine.UIElements.PointerCaptureEvent>
    {
        public PointerCaptureEvent() {}
    }

    public abstract class PointerCaptureEventBase<T> : UnityEngine.UIElements.EventBase<T>, UnityEngine.UIElements.IPointerCaptureEvent where T : UnityEngine.UIElements.PointerCaptureEventBase<T>, new()
    {
        public int pointerId { get; }
        public UnityEngine.UIElements.IEventHandler relatedTarget { get; }
        protected PointerCaptureEventBase() {}
        public static T GetPooled(UnityEngine.UIElements.IEventHandler target, UnityEngine.UIElements.IEventHandler relatedTarget, int pointerId);
        protected virtual void Init();
    }

    [System.Runtime.CompilerServices.Extension] public static class PointerCaptureHelper
    {
        [System.Runtime.CompilerServices.Extension] public static void CapturePointer(UnityEngine.UIElements.IEventHandler handler, int pointerId);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.IEventHandler GetCapturingElement(UnityEngine.UIElements.IPanel panel, int pointerId);
        [System.Runtime.CompilerServices.Extension] public static bool HasPointerCapture(UnityEngine.UIElements.IEventHandler handler, int pointerId);
        [System.Runtime.CompilerServices.Extension] public static void ReleasePointer(UnityEngine.UIElements.IEventHandler handler, int pointerId);
        [System.Runtime.CompilerServices.Extension] public static void ReleasePointer(UnityEngine.UIElements.IPanel panel, int pointerId);
    }

    public class PointerCaptureOutEvent : UnityEngine.UIElements.PointerCaptureEventBase<UnityEngine.UIElements.PointerCaptureOutEvent>
    {
        public PointerCaptureOutEvent() {}
    }

    public sealed class PointerDownEvent : UnityEngine.UIElements.PointerEventBase<UnityEngine.UIElements.PointerDownEvent>
    {
        public PointerDownEvent() {}
        protected virtual void Init();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public sealed class PointerEnterEvent : UnityEngine.UIElements.PointerEventBase<UnityEngine.UIElements.PointerEnterEvent>
    {
        public PointerEnterEvent() {}
        protected virtual void Init();
    }

    public abstract class PointerEventBase<T> : UnityEngine.UIElements.EventBase<T>, UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal where T : UnityEngine.UIElements.PointerEventBase<T>, new()
    {
        public virtual bool actionKey { get; }
        public virtual float altitudeAngle { get; protected set; }
        public virtual bool altKey { get; }
        public virtual float azimuthAngle { get; protected set; }
        public virtual int button { get; protected set; }
        public virtual int clickCount { get; protected set; }
        public virtual bool commandKey { get; }
        public virtual bool ctrlKey { get; }
        public virtual UnityEngine.UIElements.IEventHandler currentTarget { get; }
        public virtual UnityEngine.Vector3 deltaPosition { get; protected set; }
        public virtual float deltaTime { get; protected set; }
        public virtual bool isPrimary { get; protected set; }
        public virtual UnityEngine.Vector3 localPosition { get; protected set; }
        public virtual UnityEngine.EventModifiers modifiers { get; protected set; }
        public virtual int pointerId { get; protected set; }
        public virtual string pointerType { get; protected set; }
        public virtual UnityEngine.Vector3 position { get; protected set; }
        public virtual int pressedButtons { get; protected set; }
        public virtual float pressure { get; protected set; }
        public virtual UnityEngine.Vector2 radius { get; protected set; }
        public virtual UnityEngine.Vector2 radiusVariance { get; protected set; }
        public virtual bool shiftKey { get; }
        public virtual float tangentialPressure { get; protected set; }
        public virtual float twist { get; protected set; }
        protected PointerEventBase() {}
        public static T GetPooled(UnityEngine.Event systemEvent);
        public static T GetPooled(UnityEngine.UIElements.IPointerEvent triggerEvent);
        public static T GetPooled(UnityEngine.Touch touch, UnityEngine.EventModifiers modifiers = 0);
        protected virtual void Init();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
        protected virtual void PreDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public static class PointerId
    {
        public static readonly int invalidPointerId;
        public static readonly int maxPointers;
        public static readonly int mousePointerId;
        public static readonly int penPointerCount;
        public static readonly int penPointerIdBase;
        public static readonly int touchPointerCount;
        public static readonly int touchPointerIdBase;
    }

    public sealed class PointerLeaveEvent : UnityEngine.UIElements.PointerEventBase<UnityEngine.UIElements.PointerLeaveEvent>
    {
        public PointerLeaveEvent() {}
        protected virtual void Init();
    }

    public abstract class PointerManipulator : UnityEngine.UIElements.MouseManipulator
    {
        protected PointerManipulator() {}
        protected bool CanStartManipulation(UnityEngine.UIElements.IPointerEvent e);
        protected bool CanStopManipulation(UnityEngine.UIElements.IPointerEvent e);
    }

    public sealed class PointerMoveEvent : UnityEngine.UIElements.PointerEventBase<UnityEngine.UIElements.PointerMoveEvent>
    {
        public PointerMoveEvent() {}
        protected virtual void Init();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public sealed class PointerOutEvent : UnityEngine.UIElements.PointerEventBase<UnityEngine.UIElements.PointerOutEvent>
    {
        public PointerOutEvent() {}
    }

    public sealed class PointerOverEvent : UnityEngine.UIElements.PointerEventBase<UnityEngine.UIElements.PointerOverEvent>
    {
        public PointerOverEvent() {}
    }

    public sealed class PointerStationaryEvent : UnityEngine.UIElements.PointerEventBase<UnityEngine.UIElements.PointerStationaryEvent>
    {
        public PointerStationaryEvent() {}
        protected virtual void Init();
    }

    public static class PointerType
    {
        public static readonly string mouse;
        public static readonly string pen;
        public static readonly string touch;
        public static readonly string unknown;
    }

    public sealed class PointerUpEvent : UnityEngine.UIElements.PointerEventBase<UnityEngine.UIElements.PointerUpEvent>
    {
        public PointerUpEvent() {}
        protected virtual void Init();
        protected virtual void PostDispatch(UnityEngine.UIElements.IPanel panel);
    }

    public class PopupWindow : UnityEngine.UIElements.TextElement
    {
        public static readonly string contentUssClassName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public PopupWindow() {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.PopupWindow, UnityEngine.UIElements.PopupWindow.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.TextElement.UxmlTraits
        {
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
        }
    }

    public enum Position
    {
        public const UnityEngine.UIElements.Position Absolute = 1;
        public const UnityEngine.UIElements.Position Relative = 0;
        public int value__;
    }

    public enum PropagationPhase
    {
        public const UnityEngine.UIElements.PropagationPhase AtTarget = 2;
        public const UnityEngine.UIElements.PropagationPhase BubbleUp = 3;
        public const UnityEngine.UIElements.PropagationPhase DefaultAction = 4;
        public const UnityEngine.UIElements.PropagationPhase DefaultActionAtTarget = 5;
        public const UnityEngine.UIElements.PropagationPhase None = 0;
        public const UnityEngine.UIElements.PropagationPhase TrickleDown = 1;
        public int value__;
    }

    public class RepeatButton : UnityEngine.UIElements.TextElement
    {
        public static readonly string ussClassName;
        public RepeatButton() {}
        public RepeatButton(System.Action clickEvent, long delay, long interval) {}
        public void SetAction(System.Action clickEvent, long delay, long interval);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.RepeatButton, UnityEngine.UIElements.RepeatButton.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.TextElement.UxmlTraits
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class Scroller : UnityEngine.UIElements.VisualElement
    {
        public static readonly string highButtonUssClassName;
        public static readonly string horizontalVariantUssClassName;
        public static readonly string lowButtonUssClassName;
        public static readonly string sliderUssClassName;
        public static readonly string ussClassName;
        public static readonly string verticalVariantUssClassName;
        public event System.Action<float> valueChanged;
        public UnityEngine.UIElements.SliderDirection direction { get; set; }
        public UnityEngine.UIElements.RepeatButton highButton { get; }
        public float highValue { get; set; }
        public UnityEngine.UIElements.RepeatButton lowButton { get; }
        public float lowValue { get; set; }
        public UnityEngine.UIElements.Slider slider { get; }
        public float value { get; set; }
        public Scroller() {}
        public Scroller(float lowValue, float highValue, System.Action<float> valueChanged, UnityEngine.UIElements.SliderDirection direction = 1) {}
        public void Adjust(float factor);
        public void ScrollPageDown();
        public void ScrollPageDown(float factor);
        public void ScrollPageUp();
        public void ScrollPageUp(float factor);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.Scroller, UnityEngine.UIElements.Scroller.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class ScrollView : UnityEngine.UIElements.VisualElement
    {
        public static readonly string contentUssClassName;
        public static readonly string horizontalVariantUssClassName;
        public static readonly string hScrollerUssClassName;
        public static readonly string scrollVariantUssClassName;
        public static readonly string ussClassName;
        public static readonly string verticalHorizontalVariantUssClassName;
        public static readonly string verticalVariantUssClassName;
        public static readonly string viewportUssClassName;
        public static readonly string vScrollerUssClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public UnityEngine.UIElements.VisualElement contentViewport { get; }
        public float elasticity { get; set; }
        public float horizontalPageSize { get; set; }
        public UnityEngine.UIElements.Scroller horizontalScroller { get; }
        public float scrollDecelerationRate { get; set; }
        public UnityEngine.Vector2 scrollOffset { get; set; }
        public bool showHorizontal { get; set; }
        public bool showVertical { get; set; }
        public UnityEngine.UIElements.ScrollView.TouchScrollBehavior touchScrollBehavior { get; set; }
        public float verticalPageSize { get; set; }
        public UnityEngine.UIElements.Scroller verticalScroller { get; }
        public ScrollView() {}
        public ScrollView(UnityEngine.UIElements.ScrollViewMode scrollViewMode) {}
        public void ScrollTo(UnityEngine.UIElements.VisualElement child);
        public enum TouchScrollBehavior
        {
            public const UnityEngine.UIElements.ScrollView.TouchScrollBehavior Clamped = 2;
            public const UnityEngine.UIElements.ScrollView.TouchScrollBehavior Elastic = 1;
            public const UnityEngine.UIElements.ScrollView.TouchScrollBehavior Unrestricted = 0;
            public int value__;
        }
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.ScrollView, UnityEngine.UIElements.ScrollView.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public enum ScrollViewMode
    {
        public const UnityEngine.UIElements.ScrollViewMode Horizontal = 1;
        public int value__;
        public const UnityEngine.UIElements.ScrollViewMode Vertical = 0;
        public const UnityEngine.UIElements.ScrollViewMode VerticalAndHorizontal = 2;
    }

    public enum SelectionType
    {
        public const UnityEngine.UIElements.SelectionType Multiple = 2;
        public const UnityEngine.UIElements.SelectionType None = 0;
        public const UnityEngine.UIElements.SelectionType Single = 1;
        public int value__;
    }

    public class Slider : UnityEngine.UIElements.BaseSlider<float>
    {
        public static readonly string inputUssClassName;
        public static readonly string labelUssClassName;
        public static readonly string ussClassName;
        public Slider() {}
        public Slider(float start, float end, UnityEngine.UIElements.SliderDirection direction = 0, float pageSize = 0) {}
        public Slider(string label, float start = 0, float end = 10, UnityEngine.UIElements.SliderDirection direction = 0, float pageSize = 0) {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.Slider, UnityEngine.UIElements.Slider.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.BaseFieldTraits<float, UnityEngine.UIElements.UxmlFloatAttributeDescription>
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public enum SliderDirection
    {
        public const UnityEngine.UIElements.SliderDirection Horizontal = 0;
        public int value__;
        public const UnityEngine.UIElements.SliderDirection Vertical = 1;
    }

    public class SliderInt : UnityEngine.UIElements.BaseSlider<int>
    {
        public static readonly string inputUssClassName;
        public static readonly string labelUssClassName;
        public static readonly string ussClassName;
        public virtual float pageSize { get; set; }
        public SliderInt() {}
        public SliderInt(int start, int end, UnityEngine.UIElements.SliderDirection direction = 0, float pageSize = 0) {}
        public SliderInt(string label, int start = 0, int end = 10, UnityEngine.UIElements.SliderDirection direction = 0, float pageSize = 0) {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.SliderInt, UnityEngine.UIElements.SliderInt.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.BaseFieldTraits<int, UnityEngine.UIElements.UxmlIntAttributeDescription>
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public struct StyleBackground : System.IEquatable<UnityEngine.UIElements.StyleBackground>, UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Background>
    {
        public virtual UnityEngine.UIElements.StyleKeyword keyword { get; set; }
        public virtual UnityEngine.UIElements.Background value { get; set; }
        public StyleBackground(UnityEngine.Sprite v) {}
        public StyleBackground(UnityEngine.Texture2D v) {}
        public StyleBackground(UnityEngine.UIElements.Background v) {}
        public StyleBackground(UnityEngine.UIElements.StyleKeyword keyword) {}
        public StyleBackground(UnityEngine.UIElements.VectorImage v) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.StyleBackground other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.StyleBackground lhs, UnityEngine.UIElements.StyleBackground rhs);
        public static UnityEngine.UIElements.StyleBackground op_Implicit(UnityEngine.Texture2D v);
        public static UnityEngine.UIElements.StyleBackground op_Implicit(UnityEngine.UIElements.Background v);
        public static UnityEngine.UIElements.StyleBackground op_Implicit(UnityEngine.UIElements.StyleKeyword keyword);
        public static bool operator !=(UnityEngine.UIElements.StyleBackground lhs, UnityEngine.UIElements.StyleBackground rhs);
        public virtual string ToString();
    }

    public struct StyleColor : System.IEquatable<UnityEngine.UIElements.StyleColor>, UnityEngine.UIElements.IStyleValue<UnityEngine.Color>
    {
        public virtual UnityEngine.UIElements.StyleKeyword keyword { get; set; }
        public virtual UnityEngine.Color value { get; set; }
        public StyleColor(UnityEngine.Color v) {}
        public StyleColor(UnityEngine.UIElements.StyleKeyword keyword) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.StyleColor other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.StyleColor lhs, UnityEngine.Color rhs);
        public static bool operator ==(UnityEngine.UIElements.StyleColor lhs, UnityEngine.UIElements.StyleColor rhs);
        public static UnityEngine.UIElements.StyleColor op_Implicit(UnityEngine.Color v);
        public static UnityEngine.UIElements.StyleColor op_Implicit(UnityEngine.UIElements.StyleKeyword keyword);
        public static bool operator !=(UnityEngine.UIElements.StyleColor lhs, UnityEngine.Color rhs);
        public static bool operator !=(UnityEngine.UIElements.StyleColor lhs, UnityEngine.UIElements.StyleColor rhs);
        public virtual string ToString();
    }

    public struct StyleCursor : System.IEquatable<UnityEngine.UIElements.StyleCursor>, UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Cursor>
    {
        public virtual UnityEngine.UIElements.StyleKeyword keyword { get; set; }
        public virtual UnityEngine.UIElements.Cursor value { get; set; }
        public StyleCursor(UnityEngine.UIElements.Cursor v) {}
        public StyleCursor(UnityEngine.UIElements.StyleKeyword keyword) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.StyleCursor other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.StyleCursor lhs, UnityEngine.UIElements.StyleCursor rhs);
        public static UnityEngine.UIElements.StyleCursor op_Implicit(UnityEngine.UIElements.Cursor v);
        public static UnityEngine.UIElements.StyleCursor op_Implicit(UnityEngine.UIElements.StyleKeyword keyword);
        public static bool operator !=(UnityEngine.UIElements.StyleCursor lhs, UnityEngine.UIElements.StyleCursor rhs);
        public virtual string ToString();
    }

    public struct StyleEnum<T> : System.IEquatable<UnityEngine.UIElements.StyleEnum<T>>, UnityEngine.UIElements.IStyleValue<T> where T : System.ValueType, System.IConvertible, new()
    {
        public virtual UnityEngine.UIElements.StyleKeyword keyword { get; set; }
        public virtual T value { get; set; }
        public StyleEnum(T v) {}
        public StyleEnum(UnityEngine.UIElements.StyleKeyword keyword) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.StyleEnum<T> other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.StyleEnum<T> lhs, UnityEngine.UIElements.StyleEnum<T> rhs);
        public static UnityEngine.UIElements.StyleEnum<T> op_Implicit(T v);
        public static UnityEngine.UIElements.StyleEnum<T> op_Implicit(UnityEngine.UIElements.StyleKeyword keyword);
        public static bool operator !=(UnityEngine.UIElements.StyleEnum<T> lhs, UnityEngine.UIElements.StyleEnum<T> rhs);
        public virtual string ToString();
    }

    public struct StyleFloat : System.IEquatable<UnityEngine.UIElements.StyleFloat>, UnityEngine.UIElements.IStyleValue<float>
    {
        public virtual UnityEngine.UIElements.StyleKeyword keyword { get; set; }
        public virtual float value { get; set; }
        public StyleFloat(float v) {}
        public StyleFloat(UnityEngine.UIElements.StyleKeyword keyword) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.StyleFloat other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.StyleFloat lhs, UnityEngine.UIElements.StyleFloat rhs);
        public static UnityEngine.UIElements.StyleFloat op_Implicit(float v);
        public static UnityEngine.UIElements.StyleFloat op_Implicit(UnityEngine.UIElements.StyleKeyword keyword);
        public static bool operator !=(UnityEngine.UIElements.StyleFloat lhs, UnityEngine.UIElements.StyleFloat rhs);
        public virtual string ToString();
    }

    public struct StyleFont : System.IEquatable<UnityEngine.UIElements.StyleFont>, UnityEngine.UIElements.IStyleValue<UnityEngine.Font>
    {
        public virtual UnityEngine.UIElements.StyleKeyword keyword { get; set; }
        public virtual UnityEngine.Font value { get; set; }
        public StyleFont(UnityEngine.Font v) {}
        public StyleFont(UnityEngine.UIElements.StyleKeyword keyword) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.StyleFont other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.StyleFont lhs, UnityEngine.UIElements.StyleFont rhs);
        public static UnityEngine.UIElements.StyleFont op_Implicit(UnityEngine.Font v);
        public static UnityEngine.UIElements.StyleFont op_Implicit(UnityEngine.UIElements.StyleKeyword keyword);
        public static bool operator !=(UnityEngine.UIElements.StyleFont lhs, UnityEngine.UIElements.StyleFont rhs);
        public virtual string ToString();
    }

    public struct StyleFontDefinition : System.IEquatable<UnityEngine.UIElements.StyleFontDefinition>, UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.FontDefinition>
    {
        public virtual UnityEngine.UIElements.StyleKeyword keyword { get; set; }
        public virtual UnityEngine.UIElements.FontDefinition value { get; set; }
        public StyleFontDefinition(UnityEngine.Font f) {}
        public StyleFontDefinition(UnityEngine.Object f) {}
        public StyleFontDefinition(UnityEngine.UIElements.FontDefinition f) {}
        public StyleFontDefinition(UnityEngine.UIElements.StyleKeyword keyword) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.StyleFontDefinition other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.StyleFontDefinition left, UnityEngine.UIElements.StyleFontDefinition right);
        public static UnityEngine.UIElements.StyleFontDefinition op_Implicit(UnityEngine.UIElements.FontDefinition f);
        public static UnityEngine.UIElements.StyleFontDefinition op_Implicit(UnityEngine.UIElements.StyleKeyword keyword);
        public static bool operator !=(UnityEngine.UIElements.StyleFontDefinition left, UnityEngine.UIElements.StyleFontDefinition right);
    }

    public struct StyleInt : System.IEquatable<UnityEngine.UIElements.StyleInt>, UnityEngine.UIElements.IStyleValue<int>
    {
        public virtual UnityEngine.UIElements.StyleKeyword keyword { get; set; }
        public virtual int value { get; set; }
        public StyleInt(int v) {}
        public StyleInt(UnityEngine.UIElements.StyleKeyword keyword) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.StyleInt other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.StyleInt lhs, UnityEngine.UIElements.StyleInt rhs);
        public static UnityEngine.UIElements.StyleInt op_Implicit(int v);
        public static UnityEngine.UIElements.StyleInt op_Implicit(UnityEngine.UIElements.StyleKeyword keyword);
        public static bool operator !=(UnityEngine.UIElements.StyleInt lhs, UnityEngine.UIElements.StyleInt rhs);
        public virtual string ToString();
    }

    public enum StyleKeyword
    {
        public const UnityEngine.UIElements.StyleKeyword Auto = 2;
        public const UnityEngine.UIElements.StyleKeyword Initial = 4;
        public const UnityEngine.UIElements.StyleKeyword None = 3;
        public const UnityEngine.UIElements.StyleKeyword Null = 1;
        public const UnityEngine.UIElements.StyleKeyword Undefined = 0;
        public int value__;
    }

    public struct StyleLength : System.IEquatable<UnityEngine.UIElements.StyleLength>, UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.Length>
    {
        public virtual UnityEngine.UIElements.StyleKeyword keyword { get; set; }
        public virtual UnityEngine.UIElements.Length value { get; set; }
        public StyleLength(float v) {}
        public StyleLength(UnityEngine.UIElements.Length v) {}
        public StyleLength(UnityEngine.UIElements.StyleKeyword keyword) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.StyleLength other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.StyleLength lhs, UnityEngine.UIElements.StyleLength rhs);
        public static UnityEngine.UIElements.StyleLength op_Implicit(float v);
        public static UnityEngine.UIElements.StyleLength op_Implicit(UnityEngine.UIElements.Length v);
        public static UnityEngine.UIElements.StyleLength op_Implicit(UnityEngine.UIElements.StyleKeyword keyword);
        public static bool operator !=(UnityEngine.UIElements.StyleLength lhs, UnityEngine.UIElements.StyleLength rhs);
        public virtual string ToString();
    }

    public class StyleSheet : UnityEngine.ScriptableObject
    {
        public int contentHash { get; set; }
        public StyleSheet() {}
    }

    public struct StyleTextShadow : System.IEquatable<UnityEngine.UIElements.StyleTextShadow>, UnityEngine.UIElements.IStyleValue<UnityEngine.UIElements.TextShadow>
    {
        public virtual UnityEngine.UIElements.StyleKeyword keyword { get; set; }
        public virtual UnityEngine.UIElements.TextShadow value { get; set; }
        public StyleTextShadow(UnityEngine.UIElements.StyleKeyword keyword) {}
        public StyleTextShadow(UnityEngine.UIElements.TextShadow v) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.StyleTextShadow other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.StyleTextShadow lhs, UnityEngine.UIElements.StyleTextShadow rhs);
        public static UnityEngine.UIElements.StyleTextShadow op_Implicit(UnityEngine.UIElements.StyleKeyword keyword);
        public static UnityEngine.UIElements.StyleTextShadow op_Implicit(UnityEngine.UIElements.TextShadow v);
        public static bool operator !=(UnityEngine.UIElements.StyleTextShadow lhs, UnityEngine.UIElements.StyleTextShadow rhs);
        public virtual string ToString();
    }

    public class TemplateContainer : UnityEngine.UIElements.BindableElement
    {
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public string templateId { get; }
        public TemplateContainer() {}
        public TemplateContainer(string templateId) {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.TemplateContainer, UnityEngine.UIElements.TemplateContainer.UxmlTraits>
        {
            public virtual string uxmlName { get; }
            public virtual string uxmlQualifiedName { get; }
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.BindableElement.UxmlTraits
        {
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class TextElement : UnityEngine.UIElements.BindableElement, UnityEngine.UIElements.INotifyValueChanged<string>, UnityEngine.UIElements.ITextElement
    {
        public static readonly string ussClassName;
        public bool displayTooltipWhenElided { get; set; }
        public bool enableRichText { get; set; }
        public bool isElided { get; }
        public virtual string text { get; set; }
        public TextElement() {}
        protected virtual UnityEngine.Vector2 DoMeasure(float desiredWidth, UnityEngine.UIElements.VisualElement.MeasureMode widthMode, float desiredHeight, UnityEngine.UIElements.VisualElement.MeasureMode heightMode);
        public virtual void HandleEvent(UnityEngine.UIElements.EventBase evt);
        public UnityEngine.Vector2 MeasureTextSize(string textToMeasure, float width, UnityEngine.UIElements.VisualElement.MeasureMode widthMode, float height, UnityEngine.UIElements.VisualElement.MeasureMode heightMode);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.TextElement, UnityEngine.UIElements.TextElement.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.BindableElement.UxmlTraits
        {
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class TextField : UnityEngine.UIElements.TextInputBaseField<string>
    {
        public static readonly string inputUssClassName;
        public static readonly string labelUssClassName;
        public static readonly string ussClassName;
        public bool multiline { get; set; }
        public virtual string value { get; set; }
        public TextField() {}
        public TextField(string label) {}
        public TextField(int maxLength, bool multiline, bool isPasswordField, char maskChar) {}
        public TextField(string label, int maxLength, bool multiline, bool isPasswordField, char maskChar) {}
        public void SelectRange(int rangeCursorIndex, int selectionIndex);
        public virtual void SetValueWithoutNotify(string newValue);
        protected virtual string StringToValue(string str);
        protected virtual string ValueToString(string value);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.TextField, UnityEngine.UIElements.TextField.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.TextInputBaseField<string>
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public abstract class TextInputBaseField<TValueType> : UnityEngine.UIElements.BaseField<TValueType>
    {
        public static readonly string inputUssClassName;
        public static readonly string labelUssClassName;
        public static readonly string multilineInputUssClassName;
        public static readonly string singleLineInputUssClassName;
        public static readonly string textInputUssName;
        public static readonly string ussClassName;
        public UnityEngine.Color cursorColor { get; }
        public int cursorIndex { get; }
        public bool doubleClickSelectsWord { get; set; }
        public bool isDelayed { get; set; }
        public bool isPasswordField { get; set; }
        public bool isReadOnly { get; set; }
        public char maskChar { get; set; }
        public int maxLength { get; set; }
        public int selectIndex { get; }
        public UnityEngine.Color selectionColor { get; }
        public string text { get; protected set; }
        protected UnityEngine.UIElements.TextInputBaseField<TValueType> textInputBase { get; }
        public bool tripleClickSelectsLine { get; set; }
        protected TextInputBaseField(int maxLength, char maskChar, UnityEngine.UIElements.TextInputBaseField<TValueType> textInputBase) {}
        protected TextInputBaseField(string label, int maxLength, char maskChar, UnityEngine.UIElements.TextInputBaseField<TValueType> textInputBase) {}
        protected virtual void ExecuteDefaultActionAtTarget(UnityEngine.UIElements.EventBase evt);
        public UnityEngine.Vector2 MeasureTextSize(string textToMeasure, float width, UnityEngine.UIElements.VisualElement.MeasureMode widthMode, float height, UnityEngine.UIElements.VisualElement.MeasureMode heightMode);
        public void SelectAll();
        protected virtual TValueType StringToValue(string str);
        protected virtual void UpdateMixedValueContent();
        protected virtual string ValueToString(TValueType value);
        public class UxmlTraits<TValueType> : UnityEngine.UIElements.BaseFieldTraits<string, UnityEngine.UIElements.UxmlStringAttributeDescription>
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
        protected abstract class TextInputBase<TValueType> : UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.ITextInputField
        {
            public UnityEngine.Color cursorColor { get; }
            public int cursorIndex { get; }
            public virtual bool doubleClickSelectsWord { get; set; }
            public virtual bool isPasswordField { get; set; }
            public bool isReadOnly { get; set; }
            public char maskChar { get; set; }
            public int maxLength { get; set; }
            public int selectIndex { get; }
            public UnityEngine.Color selectionColor { get; }
            public virtual string text { get; set; }
            public virtual bool tripleClickSelectsLine { get; set; }
            protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
            protected virtual UnityEngine.Vector2 DoMeasure(float desiredWidth, UnityEngine.UIElements.VisualElement.MeasureMode widthMode, float desiredHeight, UnityEngine.UIElements.VisualElement.MeasureMode heightMode);
            protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
            protected virtual void ExecuteDefaultActionAtTarget(UnityEngine.UIElements.EventBase evt);
            public void ResetValueAndText();
            public void SelectAll();
            protected virtual TValueType StringToValue(string str);
        }
    }

    public enum TextOverflow
    {
        public const UnityEngine.UIElements.TextOverflow Clip = 0;
        public const UnityEngine.UIElements.TextOverflow Ellipsis = 1;
        public int value__;
    }

    public enum TextOverflowPosition
    {
        public const UnityEngine.UIElements.TextOverflowPosition End = 0;
        public const UnityEngine.UIElements.TextOverflowPosition Middle = 2;
        public const UnityEngine.UIElements.TextOverflowPosition Start = 1;
        public int value__;
    }

    public struct TextShadow : System.IEquatable<UnityEngine.UIElements.TextShadow>
    {
        public float blurRadius;
        public UnityEngine.Color color;
        public UnityEngine.Vector2 offset;
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.TextShadow other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.TextShadow style1, UnityEngine.UIElements.TextShadow style2);
        public static bool operator !=(UnityEngine.UIElements.TextShadow style1, UnityEngine.UIElements.TextShadow style2);
        public virtual string ToString();
    }

    public class ThemeStyleSheet : UnityEngine.UIElements.StyleSheet
    {
        public ThemeStyleSheet() {}
    }

    public struct TimerState : System.IEquatable<UnityEngine.UIElements.TimerState>
    {
        public long deltaTime { get; }
        public long now { get; set; }
        public long start { get; set; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.TimerState other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.TimerState state1, UnityEngine.UIElements.TimerState state2);
        public static bool operator !=(UnityEngine.UIElements.TimerState state1, UnityEngine.UIElements.TimerState state2);
    }

    public class Toggle : UnityEngine.UIElements.BaseField<bool>
    {
        public static readonly string checkmarkUssClassName;
        public static readonly string inputUssClassName;
        public static readonly string labelUssClassName;
        public static readonly string noTextVariantUssClassName;
        public static readonly string textUssClassName;
        public static readonly string ussClassName;
        public string text { get; set; }
        public Toggle() {}
        public Toggle(string label) {}
        public virtual void SetValueWithoutNotify(bool newValue);
        protected virtual void UpdateMixedValueContent();
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.Toggle, UnityEngine.UIElements.Toggle.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.BaseFieldTraits<bool, UnityEngine.UIElements.UxmlBoolAttributeDescription>
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class TooltipEvent : UnityEngine.UIElements.EventBase<UnityEngine.UIElements.TooltipEvent>
    {
        public UnityEngine.Rect rect { get; set; }
        public string tooltip { get; set; }
        public TooltipEvent() {}
        protected virtual void Init();
    }

    public enum TrickleDown
    {
        public const UnityEngine.UIElements.TrickleDown NoTrickleDown = 0;
        public const UnityEngine.UIElements.TrickleDown TrickleDown = 1;
        public int value__;
    }

    public class TwoPaneSplitView : UnityEngine.UIElements.VisualElement
    {
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public UnityEngine.UIElements.VisualElement fixedPane { get; }
        public int fixedPaneIndex { get; set; }
        public float fixedPaneInitialDimension { get; set; }
        public UnityEngine.UIElements.VisualElement flexedPane { get; }
        public UnityEngine.UIElements.TwoPaneSplitViewOrientation orientation { get; set; }
        public TwoPaneSplitView() {}
        public TwoPaneSplitView(int fixedPaneIndex, float fixedPaneStartDimension, UnityEngine.UIElements.TwoPaneSplitViewOrientation orientation) {}
        public void CollapseChild(int index);
        public void UnCollapse();
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.TwoPaneSplitView, UnityEngine.UIElements.TwoPaneSplitView.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public enum TwoPaneSplitViewOrientation
    {
        public const UnityEngine.UIElements.TwoPaneSplitViewOrientation Horizontal = 0;
        public int value__;
        public const UnityEngine.UIElements.TwoPaneSplitViewOrientation Vertical = 1;
    }

    public abstract class TypedUxmlAttributeDescription<T> : UnityEngine.UIElements.UxmlAttributeDescription
    {
        public T defaultValue { get; set; }
        public virtual string defaultValueAsString { get; }
        protected TypedUxmlAttributeDescription() {}
        public abstract T GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
    }

    public static class UQuery
    {
    }

    public struct UQueryBuilder<T> : System.IEquatable<UnityEngine.UIElements.UQueryBuilder<T>> where T : UnityEngine.UIElements.VisualElement
    {
        public UQueryBuilder(UnityEngine.UIElements.VisualElement visualElement) {}
        public UnityEngine.UIElements.UQueryBuilder<T> Active();
        public T AtIndex(int index);
        public UnityEngine.UIElements.UQueryState<T> Build();
        public UnityEngine.UIElements.UQueryBuilder<T> Checked();
        public UnityEngine.UIElements.UQueryBuilder<T2> Children<T2>(string name = default(string), string className = default(string)) where T2 : UnityEngine.UIElements.VisualElement;
        public UnityEngine.UIElements.UQueryBuilder<T2> Children<T2>(string name = default(string), params string[] classes) where T2 : UnityEngine.UIElements.VisualElement;
        public UnityEngine.UIElements.UQueryBuilder<T> Class(string classname);
        public UnityEngine.UIElements.UQueryBuilder<T2> Descendents<T2>(string name = default(string), string classname = default(string)) where T2 : UnityEngine.UIElements.VisualElement;
        public UnityEngine.UIElements.UQueryBuilder<T2> Descendents<T2>(string name = default(string), params string[] classNames) where T2 : UnityEngine.UIElements.VisualElement;
        public UnityEngine.UIElements.UQueryBuilder<T> Enabled();
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.UQueryBuilder<T> other);
        public T First();
        public UnityEngine.UIElements.UQueryBuilder<T> Focused();
        public System.Collections.Generic.List<T2> ForEach<T2>(System.Func<T, T2> funcCall);
        public void ForEach(System.Action<T> funcCall);
        public void ForEach<T2>(System.Collections.Generic.List<T2> result, System.Func<T, T2> funcCall);
        public virtual int GetHashCode();
        public UnityEngine.UIElements.UQueryBuilder<T> Hovered();
        public T Last();
        public UnityEngine.UIElements.UQueryBuilder<T> Name(string id);
        public UnityEngine.UIElements.UQueryBuilder<T> NotActive();
        public UnityEngine.UIElements.UQueryBuilder<T> NotChecked();
        public UnityEngine.UIElements.UQueryBuilder<T> NotEnabled();
        public UnityEngine.UIElements.UQueryBuilder<T> NotFocused();
        public UnityEngine.UIElements.UQueryBuilder<T> NotHovered();
        [System.Obsolete(@"Use NotChecked() instead")] public UnityEngine.UIElements.UQueryBuilder<T> NotSelected();
        public UnityEngine.UIElements.UQueryBuilder<T> NotVisible();
        public UnityEngine.UIElements.UQueryBuilder<T2> OfType<T2>(string name = default(string), string className = default(string)) where T2 : UnityEngine.UIElements.VisualElement;
        public UnityEngine.UIElements.UQueryBuilder<T2> OfType<T2>(string name = default(string), params string[] classes) where T2 : UnityEngine.UIElements.VisualElement;
        public static bool operator ==(UnityEngine.UIElements.UQueryBuilder<T> builder1, UnityEngine.UIElements.UQueryBuilder<T> builder2);
        public static T op_Implicit(UnityEngine.UIElements.UQueryBuilder<T> s);
        public static bool operator !=(UnityEngine.UIElements.UQueryBuilder<T> builder1, UnityEngine.UIElements.UQueryBuilder<T> builder2);
        [System.Obsolete(@"Use Checked() instead")] public UnityEngine.UIElements.UQueryBuilder<T> Selected();
        public System.Collections.Generic.List<T> ToList();
        public void ToList(System.Collections.Generic.List<T> results);
        public UnityEngine.UIElements.UQueryBuilder<T> Visible();
        public UnityEngine.UIElements.UQueryBuilder<T> Where(System.Func<T, bool> selectorPredicate);
    }

    [System.Runtime.CompilerServices.Extension] public static class UQueryExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static T Q<T>(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string)) where T : UnityEngine.UIElements.VisualElement;
        [System.Runtime.CompilerServices.Extension] public static T Q<T>(UnityEngine.UIElements.VisualElement e, string name = default(string), params string[] classes) where T : UnityEngine.UIElements.VisualElement;
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.VisualElement Q(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string));
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.VisualElement Q(UnityEngine.UIElements.VisualElement e, string name = default(string), params string[] classes);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.UQueryBuilder<UnityEngine.UIElements.VisualElement> Query(UnityEngine.UIElements.VisualElement e);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.UQueryBuilder<T> Query<T>(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string)) where T : UnityEngine.UIElements.VisualElement;
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.UQueryBuilder<T> Query<T>(UnityEngine.UIElements.VisualElement e, string name = default(string), params string[] classes) where T : UnityEngine.UIElements.VisualElement;
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.UQueryBuilder<UnityEngine.UIElements.VisualElement> Query(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string));
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.UQueryBuilder<UnityEngine.UIElements.VisualElement> Query(UnityEngine.UIElements.VisualElement e, string name = default(string), params string[] classes);
    }

    public struct UQueryState<T> : System.IEquatable<UnityEngine.UIElements.UQueryState<T>> where T : UnityEngine.UIElements.VisualElement
    {
        public T AtIndex(int index);
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.UQueryState<T> other);
        public T First();
        public System.Collections.Generic.List<T2> ForEach<T2>(System.Func<T, T2> funcCall);
        public void ForEach(System.Action<T> funcCall);
        public void ForEach<T2>(System.Collections.Generic.List<T2> result, System.Func<T, T2> funcCall);
        public virtual int GetHashCode();
        public T Last();
        public static bool operator ==(UnityEngine.UIElements.UQueryState<T> state1, UnityEngine.UIElements.UQueryState<T> state2);
        public static bool operator !=(UnityEngine.UIElements.UQueryState<T> state1, UnityEngine.UIElements.UQueryState<T> state2);
        public UnityEngine.UIElements.UQueryState<T> RebuildOn(UnityEngine.UIElements.VisualElement element);
        public System.Collections.Generic.List<T> ToList();
        public void ToList(System.Collections.Generic.List<T> results);
    }

    [System.Flags] public enum UsageHints
    {
        public const UnityEngine.UIElements.UsageHints DynamicTransform = 1;
        public const UnityEngine.UIElements.UsageHints GroupTransform = 2;
        public const UnityEngine.UIElements.UsageHints None = 0;
        public int value__;
    }

    public abstract class UxmlAttributeDescription
    {
        protected const string xmlSchemaNamespace = http://www.w3.org/2001/XMLSchema;
        public abstract string defaultValueAsString { get; }
        public string name { get; set; }
        public System.Collections.Generic.IEnumerable<string> obsoleteNames { get; set; }
        public UnityEngine.UIElements.UxmlTypeRestriction restriction { get; set; }
        public string type { get; protected set; }
        public string typeNamespace { get; protected set; }
        public UnityEngine.UIElements.UxmlAttributeDescription.Use use { get; set; }
        protected UxmlAttributeDescription() {}
        protected T GetValueFromBag<T>(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, System.Func<string, T, T> converterFunc, T defaultValue);
        protected bool TryGetValueFromBag<T>(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, System.Func<string, T, T> converterFunc, T defaultValue, ref T value);
        public enum Use
        {
            public const UnityEngine.UIElements.UxmlAttributeDescription.Use None = 0;
            public const UnityEngine.UIElements.UxmlAttributeDescription.Use Optional = 1;
            public const UnityEngine.UIElements.UxmlAttributeDescription.Use Prohibited = 2;
            public const UnityEngine.UIElements.UxmlAttributeDescription.Use Required = 3;
            public int value__;
        }
    }

    public class UxmlAttributeOverridesFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlAttributeOverridesTraits>
    {
        public virtual string substituteForTypeName { get; }
        public virtual string substituteForTypeNamespace { get; }
        public virtual string substituteForTypeQualifiedName { get; }
        public virtual string uxmlName { get; }
        public virtual string uxmlQualifiedName { get; }
        public UxmlAttributeOverridesFactory() {}
        public virtual UnityEngine.UIElements.VisualElement Create(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
    }

    public class UxmlAttributeOverridesTraits : UnityEngine.UIElements.UxmlTraits
    {
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
        public UxmlAttributeOverridesTraits() {}
    }

    public class UxmlBoolAttributeDescription : UnityEngine.UIElements.TypedUxmlAttributeDescription<bool>
    {
        public virtual string defaultValueAsString { get; }
        public UxmlBoolAttributeDescription() {}
        public virtual bool GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public bool TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, ref bool value);
    }

    public class UxmlChildElementDescription
    {
        public string elementName { get; protected set; }
        public string elementNamespace { get; protected set; }
        public UxmlChildElementDescription(System.Type t) {}
    }

    public class UxmlColorAttributeDescription : UnityEngine.UIElements.TypedUxmlAttributeDescription<UnityEngine.Color>
    {
        public virtual string defaultValueAsString { get; }
        public UxmlColorAttributeDescription() {}
        public virtual UnityEngine.Color GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public bool TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, ref UnityEngine.Color value);
    }

    public class UxmlDoubleAttributeDescription : UnityEngine.UIElements.TypedUxmlAttributeDescription<double>
    {
        public virtual string defaultValueAsString { get; }
        public UxmlDoubleAttributeDescription() {}
        public virtual double GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public bool TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, ref double value);
    }

    public class UxmlEnumAttributeDescription<T> : UnityEngine.UIElements.TypedUxmlAttributeDescription<T> where T : System.ValueType, System.IConvertible, new()
    {
        public virtual string defaultValueAsString { get; }
        public UxmlEnumAttributeDescription() {}
        public virtual T GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public bool TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, ref T value);
    }

    public class UxmlEnumeration : UnityEngine.UIElements.UxmlTypeRestriction
    {
        public System.Collections.Generic.IEnumerable<string> values { get; set; }
        public UxmlEnumeration() {}
        public virtual bool Equals(UnityEngine.UIElements.UxmlTypeRestriction other);
    }

    public class UxmlFactory<TCreatedType> : UnityEngine.UIElements.UxmlFactory<TCreatedType, UnityEngine.UIElements.VisualElement.UxmlTraits> where TCreatedType : UnityEngine.UIElements.VisualElement, new()
    {
        public UxmlFactory() {}
    }

    public class UxmlFactory<TCreatedType, TTraits> : UnityEngine.UIElements.IUxmlFactory where TCreatedType : UnityEngine.UIElements.VisualElement, new() where TTraits : UnityEngine.UIElements.UxmlTraits, new()
    {
        public virtual bool canHaveAnyAttribute { get; }
        public virtual string substituteForTypeName { get; }
        public virtual string substituteForTypeNamespace { get; }
        public virtual string substituteForTypeQualifiedName { get; }
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription> uxmlAttributesDescription { get; }
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
        public virtual string uxmlName { get; }
        public virtual string uxmlNamespace { get; }
        public virtual string uxmlQualifiedName { get; }
        protected UxmlFactory() {}
        public virtual bool AcceptsAttributeBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public virtual UnityEngine.UIElements.VisualElement Create(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
    }

    public class UxmlFloatAttributeDescription : UnityEngine.UIElements.TypedUxmlAttributeDescription<float>
    {
        public virtual string defaultValueAsString { get; }
        public UxmlFloatAttributeDescription() {}
        public virtual float GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public bool TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, ref float value);
    }

    public class UxmlHash128AttributeDescription : UnityEngine.UIElements.TypedUxmlAttributeDescription<UnityEngine.Hash128>
    {
        public virtual string defaultValueAsString { get; }
        public UxmlHash128AttributeDescription() {}
        public virtual UnityEngine.Hash128 GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public bool TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, ref UnityEngine.Hash128 value);
    }

    public class UxmlIntAttributeDescription : UnityEngine.UIElements.TypedUxmlAttributeDescription<int>
    {
        public virtual string defaultValueAsString { get; }
        public UxmlIntAttributeDescription() {}
        public virtual int GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public bool TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, ref int value);
    }

    public class UxmlLongAttributeDescription : UnityEngine.UIElements.TypedUxmlAttributeDescription<long>
    {
        public virtual string defaultValueAsString { get; }
        public UxmlLongAttributeDescription() {}
        public virtual long GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public bool TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, ref long value);
    }

    public class UxmlRootElementFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlRootElementTraits>
    {
        public virtual string substituteForTypeName { get; }
        public virtual string substituteForTypeNamespace { get; }
        public virtual string substituteForTypeQualifiedName { get; }
        public virtual string uxmlName { get; }
        public virtual string uxmlQualifiedName { get; }
        public UxmlRootElementFactory() {}
        public virtual UnityEngine.UIElements.VisualElement Create(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
    }

    public class UxmlRootElementTraits : UnityEngine.UIElements.UxmlTraits
    {
        protected UnityEngine.UIElements.UxmlStringAttributeDescription m_Name;
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
        public UxmlRootElementTraits() {}
    }

    public class UxmlStringAttributeDescription : UnityEngine.UIElements.TypedUxmlAttributeDescription<string>
    {
        public virtual string defaultValueAsString { get; }
        public UxmlStringAttributeDescription() {}
        public virtual string GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public bool TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, ref string value);
    }

    public class UxmlStyleFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlStyleTraits>
    {
        public virtual string substituteForTypeName { get; }
        public virtual string substituteForTypeNamespace { get; }
        public virtual string substituteForTypeQualifiedName { get; }
        public virtual string uxmlName { get; }
        public virtual string uxmlQualifiedName { get; }
        public UxmlStyleFactory() {}
        public virtual UnityEngine.UIElements.VisualElement Create(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
    }

    public class UxmlStyleTraits : UnityEngine.UIElements.UxmlTraits
    {
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
        public UxmlStyleTraits() {}
    }

    public class UxmlTemplateFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlTemplateTraits>
    {
        public virtual string substituteForTypeName { get; }
        public virtual string substituteForTypeNamespace { get; }
        public virtual string substituteForTypeQualifiedName { get; }
        public virtual string uxmlName { get; }
        public virtual string uxmlQualifiedName { get; }
        public UxmlTemplateFactory() {}
        public virtual UnityEngine.UIElements.VisualElement Create(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
    }

    public class UxmlTemplateTraits : UnityEngine.UIElements.UxmlTraits
    {
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
        public UxmlTemplateTraits() {}
    }

    public abstract class UxmlTraits
    {
        public bool canHaveAnyAttribute { get; protected set; }
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription> uxmlAttributesDescription { get; }
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
        protected UxmlTraits() {}
        public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
    }

    public class UxmlTypeAttributeDescription<TBase> : UnityEngine.UIElements.TypedUxmlAttributeDescription<System.Type>
    {
        public virtual string defaultValueAsString { get; }
        public UxmlTypeAttributeDescription() {}
        public virtual System.Type GetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        public bool TryGetValueFromBag(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc, ref System.Type value);
    }

    public abstract class UxmlTypeRestriction : System.IEquatable<UnityEngine.UIElements.UxmlTypeRestriction>
    {
        protected UxmlTypeRestriction() {}
        public virtual bool Equals(UnityEngine.UIElements.UxmlTypeRestriction other);
    }

    public class UxmlValueBounds : UnityEngine.UIElements.UxmlTypeRestriction
    {
        public bool excludeMax { get; set; }
        public bool excludeMin { get; set; }
        public string max { get; set; }
        public string min { get; set; }
        public UxmlValueBounds() {}
        public virtual bool Equals(UnityEngine.UIElements.UxmlTypeRestriction other);
    }

    public class UxmlValueMatches : UnityEngine.UIElements.UxmlTypeRestriction
    {
        public string regex { get; set; }
        public UxmlValueMatches() {}
        public virtual bool Equals(UnityEngine.UIElements.UxmlTypeRestriction other);
    }

    public class ValidateCommandEvent : UnityEngine.UIElements.CommandEventBase<UnityEngine.UIElements.ValidateCommandEvent>
    {
        public ValidateCommandEvent() {}
    }

    public class VectorImage : UnityEngine.ScriptableObject
    {
        public VectorImage() {}
    }

    public struct Vertex
    {
        public static readonly float nearZ;
        public UnityEngine.Vector3 position;
        public UnityEngine.Color32 tint;
        public UnityEngine.Vector2 uv;
    }

    public enum Visibility
    {
        public const UnityEngine.UIElements.Visibility Hidden = 1;
        public int value__;
        public const UnityEngine.UIElements.Visibility Visible = 0;
    }

    [System.Reflection.DefaultMember(@"Item")] public class VisualElement : UnityEngine.UIElements.Focusable, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IVisualElementScheduler
    {
        public static readonly string disabledUssClassName;
        [System.Obsolete(@"VisualElement.cacheAsBitmap is deprecated and has no effect")] public bool cacheAsBitmap { get; set; }
        public virtual bool canGrabFocus { get; }
        public int childCount { get; }
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public UnityEngine.Rect contentRect { get; }
        public UnityEngine.UIElements.ICustomStyle customStyle { get; }
        public bool enabledInHierarchy { get; }
        public bool enabledSelf { get; }
        public UnityEngine.UIElements.IExperimentalFeatures experimental { get; }
        public virtual UnityEngine.UIElements.FocusController focusController { get; }
        public System.Action<UnityEngine.UIElements.MeshGenerationContext> generateVisualContent { get; set; }
        public UnityEngine.UIElements.VisualElement.Hierarchy hierarchy { get; }
        public UnityEngine.UIElements.VisualElement this[int key] { get; }
        public UnityEngine.Rect layout { get; }
        public UnityEngine.Rect localBound { get; }
        public string name { get; set; }
        protected UnityEngine.Rect paddingRect { get; }
        public UnityEngine.UIElements.IPanel panel { get; }
        public UnityEngine.UIElements.VisualElement parent { get; }
        public UnityEngine.UIElements.PickingMode pickingMode { get; set; }
        public UnityEngine.UIElements.IResolvedStyle resolvedStyle { get; }
        public UnityEngine.UIElements.IVisualElementScheduler schedule { get; }
        public UnityEngine.UIElements.IStyle style { get; }
        public UnityEngine.UIElements.VisualElementStyleSheetSet styleSheets { get; }
        public string tooltip { get; set; }
        public UnityEngine.UIElements.ITransform transform { get; }
        public UnityEngine.UIElements.UsageHints usageHints { get; set; }
        public object userData { get; set; }
        public string viewDataKey { get; set; }
        public bool visible { get; set; }
        public UnityEngine.Rect worldBound { get; }
        public UnityEngine.Matrix4x4 worldTransform { get; }
        public VisualElement() {}
        public void Add(UnityEngine.UIElements.VisualElement child);
        public void AddToClassList(string className);
        public void BringToFront();
        public System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement> Children();
        public bool ClassListContains(string cls);
        public void Clear();
        public void ClearClassList();
        public bool Contains(UnityEngine.UIElements.VisualElement child);
        public virtual bool ContainsPoint(UnityEngine.Vector2 localPoint);
        protected virtual UnityEngine.Vector2 DoMeasure(float desiredWidth, UnityEngine.UIElements.VisualElement.MeasureMode widthMode, float desiredHeight, UnityEngine.UIElements.VisualElement.MeasureMode heightMode);
        public UnityEngine.UIElements.VisualElement ElementAt(int index);
        public void EnableInClassList(string className, bool enable);
        protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
        public object FindAncestorUserData();
        public UnityEngine.UIElements.VisualElement FindCommonAncestor(UnityEngine.UIElements.VisualElement other);
        public virtual void Focus();
        public System.Collections.Generic.IEnumerable<string> GetClasses();
        public T GetFirstAncestorOfType<T>() where T : class;
        public T GetFirstOfType<T>() where T : class;
        public int IndexOf(UnityEngine.UIElements.VisualElement element);
        public void Insert(int index, UnityEngine.UIElements.VisualElement element);
        public void MarkDirtyRepaint();
        public virtual bool Overlaps(UnityEngine.Rect rectangle);
        public void PlaceBehind(UnityEngine.UIElements.VisualElement sibling);
        public void PlaceInFront(UnityEngine.UIElements.VisualElement sibling);
        public void Remove(UnityEngine.UIElements.VisualElement element);
        public void RemoveAt(int index);
        public void RemoveFromClassList(string className);
        public void RemoveFromHierarchy();
        public virtual void SendEvent(UnityEngine.UIElements.EventBase e);
        public void SendToBack();
        public void SetEnabled(bool value);
        [System.Obsolete(@"SetEnabledFromHierarchy is deprecated and will be removed in a future release. Please use SetEnabled instead.")] protected bool SetEnabledFromHierarchy(bool state);
        public void Sort(System.Comparison<UnityEngine.UIElements.VisualElement> comp);
        public void ToggleInClassList(string className);
        public virtual string ToString();
        [System.Reflection.DefaultMember(@"Item")] public struct Hierarchy
        {
            public int childCount { get; }
            public UnityEngine.UIElements.VisualElement this[int key] { get; }
            public UnityEngine.UIElements.VisualElement parent { get; }
            public void Add(UnityEngine.UIElements.VisualElement child);
            public System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement> Children();
            public void Clear();
            public UnityEngine.UIElements.VisualElement ElementAt(int index);
            public virtual bool Equals(object obj);
            public bool Equals(UnityEngine.UIElements.VisualElement.Hierarchy other);
            public virtual int GetHashCode();
            public int IndexOf(UnityEngine.UIElements.VisualElement element);
            public void Insert(int index, UnityEngine.UIElements.VisualElement child);
            public static bool operator ==(UnityEngine.UIElements.VisualElement.Hierarchy x, UnityEngine.UIElements.VisualElement.Hierarchy y);
            public static bool operator !=(UnityEngine.UIElements.VisualElement.Hierarchy x, UnityEngine.UIElements.VisualElement.Hierarchy y);
            public void Remove(UnityEngine.UIElements.VisualElement child);
            public void RemoveAt(int index);
            public void Sort(System.Comparison<UnityEngine.UIElements.VisualElement> comp);
        }
        public enum MeasureMode
        {
            public const UnityEngine.UIElements.VisualElement.MeasureMode AtMost = 2;
            public const UnityEngine.UIElements.VisualElement.MeasureMode Exactly = 1;
            public const UnityEngine.UIElements.VisualElement.MeasureMode Undefined = 0;
            public int value__;
        }
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.VisualElement.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.UxmlTraits
        {
            protected UnityEngine.UIElements.UxmlStringAttributeDescription m_Name;
            protected UnityEngine.UIElements.UxmlEnumAttributeDescription<UnityEngine.UIElements.PickingMode> m_PickingMode;
            protected UnityEngine.UIElements.UxmlBoolAttributeDescription focusable { get; set; }
            protected UnityEngine.UIElements.UxmlIntAttributeDescription focusIndex { get; set; }
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    [System.Runtime.CompilerServices.Extension] public static class VisualElementExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void AddManipulator(UnityEngine.UIElements.VisualElement ele, UnityEngine.UIElements.IManipulator manipulator);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Rect ChangeCoordinatesTo(UnityEngine.UIElements.VisualElement src, UnityEngine.UIElements.VisualElement dest, UnityEngine.Rect rect);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Vector2 ChangeCoordinatesTo(UnityEngine.UIElements.VisualElement src, UnityEngine.UIElements.VisualElement dest, UnityEngine.Vector2 point);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Rect LocalToWorld(UnityEngine.UIElements.VisualElement ele, UnityEngine.Rect r);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Vector2 LocalToWorld(UnityEngine.UIElements.VisualElement ele, UnityEngine.Vector2 p);
        [System.Runtime.CompilerServices.Extension] public static void RemoveManipulator(UnityEngine.UIElements.VisualElement ele, UnityEngine.UIElements.IManipulator manipulator);
        [System.Runtime.CompilerServices.Extension] public static void StretchToParentSize(UnityEngine.UIElements.VisualElement elem);
        [System.Runtime.CompilerServices.Extension] public static void StretchToParentWidth(UnityEngine.UIElements.VisualElement elem);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Rect WorldToLocal(UnityEngine.UIElements.VisualElement ele, UnityEngine.Rect r);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Vector2 WorldToLocal(UnityEngine.UIElements.VisualElement ele, UnityEngine.Vector2 p);
    }

    public class VisualElementFocusChangeDirection : UnityEngine.UIElements.FocusChangeDirection
    {
        protected static UnityEngine.UIElements.VisualElementFocusChangeDirection lastValue { get; }
        public static UnityEngine.UIElements.FocusChangeDirection left { get; }
        public static UnityEngine.UIElements.FocusChangeDirection right { get; }
        protected VisualElementFocusChangeDirection(int value) {}
    }

    public class VisualElementFocusRing : UnityEngine.UIElements.IFocusRing
    {
        public UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder defaultFocusOrder { get; set; }
        public VisualElementFocusRing(UnityEngine.UIElements.VisualElement root, UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder dfo = 0) {}
        public virtual UnityEngine.UIElements.FocusChangeDirection GetFocusChangeDirection(UnityEngine.UIElements.Focusable currentFocusable, UnityEngine.UIElements.EventBase e);
        public virtual UnityEngine.UIElements.Focusable GetNextFocusable(UnityEngine.UIElements.Focusable currentFocusable, UnityEngine.UIElements.FocusChangeDirection direction);
        public enum DefaultFocusOrder
        {
            public const UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder ChildOrder = 0;
            public const UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder PositionXY = 1;
            public const UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder PositionYX = 2;
            public int value__;
        }
    }

    [System.Reflection.DefaultMember(@"Item")] public struct VisualElementStyleSheetSet : System.IEquatable<UnityEngine.UIElements.VisualElementStyleSheetSet>
    {
        public int count { get; }
        public UnityEngine.UIElements.StyleSheet this[int index] { get; }
        public void Add(UnityEngine.UIElements.StyleSheet styleSheet);
        public void Clear();
        public bool Contains(UnityEngine.UIElements.StyleSheet styleSheet);
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.UIElements.VisualElementStyleSheetSet other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.UIElements.VisualElementStyleSheetSet left, UnityEngine.UIElements.VisualElementStyleSheetSet right);
        public static bool operator !=(UnityEngine.UIElements.VisualElementStyleSheetSet left, UnityEngine.UIElements.VisualElementStyleSheetSet right);
        public bool Remove(UnityEngine.UIElements.StyleSheet styleSheet);
    }

    public class VisualTreeAsset : UnityEngine.ScriptableObject
    {
        public int contentHash { get; set; }
        public System.Collections.Generic.IEnumerable<UnityEngine.UIElements.StyleSheet> stylesheets { get; }
        public System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualTreeAsset> templateDependencies { get; }
        public VisualTreeAsset() {}
        public UnityEngine.UIElements.TemplateContainer CloneTree();
        public void CloneTree(UnityEngine.UIElements.VisualElement target);
        public UnityEngine.UIElements.TemplateContainer CloneTree(string bindingPath);
        public void CloneTree(UnityEngine.UIElements.VisualElement target, out int firstElementIndex, out int elementAddedCount);
        public UnityEngine.UIElements.TemplateContainer Instantiate();
        public UnityEngine.UIElements.TemplateContainer Instantiate(string bindingPath);
    }

    public class WheelEvent : UnityEngine.UIElements.MouseEventBase<UnityEngine.UIElements.WheelEvent>
    {
        public UnityEngine.Vector3 delta { get; }
        public WheelEvent() {}
        public static UnityEngine.UIElements.WheelEvent GetPooled(UnityEngine.Event systemEvent);
        protected virtual void Init();
    }

    public enum WhiteSpace
    {
        public const UnityEngine.UIElements.WhiteSpace Normal = 0;
        public const UnityEngine.UIElements.WhiteSpace NoWrap = 1;
        public int value__;
    }

    public enum Wrap
    {
        public const UnityEngine.UIElements.Wrap NoWrap = 0;
        public int value__;
        public const UnityEngine.UIElements.Wrap Wrap = 1;
        public const UnityEngine.UIElements.Wrap WrapReverse = 2;
    }
}

namespace UnityEngine.UIElements.Experimental
{
    public static class Easing
    {
        public static float InBack(float t);
        public static float InBack(float t, float s);
        public static float InBounce(float t);
        public static float InCirc(float t);
        public static float InCubic(float t);
        public static float InElastic(float t);
        public static float InOutBack(float t);
        public static float InOutBack(float t, float s);
        public static float InOutBounce(float t);
        public static float InOutCirc(float t);
        public static float InOutCubic(float t);
        public static float InOutElastic(float t);
        public static float InOutPower(float t, int power);
        public static float InOutQuad(float t);
        public static float InOutSine(float t);
        public static float InPower(float t, int power);
        public static float InQuad(float t);
        public static float InSine(float t);
        public static float Linear(float t);
        public static float OutBack(float t);
        public static float OutBack(float t, float s);
        public static float OutBounce(float t);
        public static float OutCirc(float t);
        public static float OutCubic(float t);
        public static float OutElastic(float t);
        public static float OutPower(float t, int power);
        public static float OutQuad(float t);
        public static float OutSine(float t);
        public static float Step(float t);
    }

    public interface ITransitionAnimations
    {
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Rect> Layout(UnityEngine.Rect to, int durationMs);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector3> Position(UnityEngine.Vector3 to, int duration);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Quaternion> Rotation(UnityEngine.Quaternion to, int duration);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<float> Scale(float to, int duration);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector2> Size(UnityEngine.Vector2 to, int durationMs);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.UIElements.Experimental.StyleValues> Start(UnityEngine.UIElements.Experimental.StyleValues to, int durationMs);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.UIElements.Experimental.StyleValues> Start(UnityEngine.UIElements.Experimental.StyleValues from, UnityEngine.UIElements.Experimental.StyleValues to, int durationMs);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<float> Start(System.Func<UnityEngine.UIElements.VisualElement, float> fromValueGetter, float to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, float> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<float> Start(float from, float to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, float> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Color> Start(System.Func<UnityEngine.UIElements.VisualElement, UnityEngine.Color> fromValueGetter, UnityEngine.Color to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, UnityEngine.Color> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Color> Start(UnityEngine.Color from, UnityEngine.Color to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, UnityEngine.Color> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Quaternion> Start(System.Func<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion> fromValueGetter, UnityEngine.Quaternion to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Quaternion> Start(UnityEngine.Quaternion from, UnityEngine.Quaternion to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, UnityEngine.Quaternion> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Rect> Start(System.Func<UnityEngine.UIElements.VisualElement, UnityEngine.Rect> fromValueGetter, UnityEngine.Rect to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, UnityEngine.Rect> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Rect> Start(UnityEngine.Rect from, UnityEngine.Rect to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, UnityEngine.Rect> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector2> Start(System.Func<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2> fromValueGetter, UnityEngine.Vector2 to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector2> Start(UnityEngine.Vector2 from, UnityEngine.Vector2 to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, UnityEngine.Vector2> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector3> Start(System.Func<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3> fromValueGetter, UnityEngine.Vector3 to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector3> Start(UnityEngine.Vector3 from, UnityEngine.Vector3 to, int durationMs, System.Action<UnityEngine.UIElements.VisualElement, UnityEngine.Vector3> onValueChanged);
        public abstract UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector2> TopLeft(UnityEngine.Vector2 to, int durationMs);
    }

    public interface IValueAnimation
    {
        public abstract int durationMs { get; set; }
        public abstract bool isRunning { get; }
        public abstract void Recycle();
        public abstract void Start();
        public abstract void Stop();
    }

    public struct StyleValues
    {
        public UnityEngine.Color backgroundColor { get; set; }
        public float borderBottomLeftRadius { get; set; }
        public float borderBottomRightRadius { get; set; }
        public float borderBottomWidth { get; set; }
        public UnityEngine.Color borderColor { get; set; }
        public float borderLeftWidth { get; set; }
        public float borderRightWidth { get; set; }
        public float borderTopLeftRadius { get; set; }
        public float borderTopRightRadius { get; set; }
        public float borderTopWidth { get; set; }
        public float bottom { get; set; }
        public UnityEngine.Color color { get; set; }
        public float flexGrow { get; set; }
        public float flexShrink { get; set; }
        public float height { get; set; }
        public float left { get; set; }
        public float marginBottom { get; set; }
        public float marginLeft { get; set; }
        public float marginRight { get; set; }
        public float marginTop { get; set; }
        public float opacity { get; set; }
        public float paddingBottom { get; set; }
        public float paddingLeft { get; set; }
        public float paddingRight { get; set; }
        public float paddingTop { get; set; }
        public float right { get; set; }
        public float top { get; set; }
        public UnityEngine.Color unityBackgroundImageTintColor { get; set; }
        public float width { get; set; }
    }

    public sealed class ValueAnimation<T> : UnityEngine.UIElements.Experimental.IValueAnimation, UnityEngine.UIElements.Experimental.IValueAnimationUpdate
    {
        public bool autoRecycle { get; set; }
        public virtual int durationMs { get; set; }
        public System.Func<float, float> easingCurve { get; set; }
        public T from { get; set; }
        public System.Func<UnityEngine.UIElements.VisualElement, T> initialValue { get; set; }
        public System.Func<T, T, float, T> interpolator { get; set; }
        public virtual bool isRunning { get; }
        public System.Action onAnimationCompleted { get; set; }
        public T to { get; set; }
        public System.Action<UnityEngine.UIElements.VisualElement, T> valueUpdated { get; set; }
        public ValueAnimation() {}
        public static UnityEngine.UIElements.Experimental.ValueAnimation<T> Create(UnityEngine.UIElements.VisualElement e, System.Func<T, T, float, T> interpolator);
        public UnityEngine.UIElements.Experimental.ValueAnimation<T> Ease(System.Func<float, float> easing);
        public UnityEngine.UIElements.Experimental.ValueAnimation<T> KeepAlive();
        public UnityEngine.UIElements.Experimental.ValueAnimation<T> OnCompleted(System.Action callback);
        public virtual void Recycle();
        public virtual void Start();
        public virtual void Stop();
    }
}
